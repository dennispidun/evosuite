/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 21 16:25:36 GMT 2022
 */

package dimacs9;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;

import java.util.ArrayList;
import org.junit.runner.RunWith;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class EdgePulse_generatedWithWCFF_ESTest extends EdgePulse_generatedWithWCFF_ESTest_scaffolding {

  @Test(timeout = 26000)
  public void test00()  throws Throwable  {
      EdgePulse edgePulse0 = new EdgePulse((-1266), (-1266), (VertexPulse) null, (VertexPulse) null, (-1266));
      VertexPulse vertexPulse0 = new VertexPulse(2716);
      EdgePulse edgePulse1 = new EdgePulse(1323, 1323, vertexPulse0, vertexPulse0, 2716);
      edgePulse0.addNextCommonTailEdge(edgePulse1);
      EdgePulse edgePulse2 = edgePulse0.getNext();
      edgePulse2.addNextCommonTailEdge(edgePulse1);
      edgePulse2.getTarget();
      edgePulse1.getID();
  }

  @Test(timeout = 26000)
  public void test01()  throws Throwable  {
      VertexPulse vertexPulse0 = new VertexPulse(0);
      vertexPulse0.reset();
      VertexPulse vertexPulse1 = vertexPulse0.getBLeftTime();
      VertexPulse vertexPulse2 = vertexPulse1.getBRigthTime();
      vertexPulse0.LabelDist3 = 870.82579721;
      VertexPulse vertexPulse3 = vertexPulse2.getBLeftDist();
      vertexPulse2.insertVertexTime(vertexPulse3);
      EdgePulse edgePulse0 = vertexPulse3.getReversedEdges();
      EdgePulse edgePulse1 = new EdgePulse(542, 542, vertexPulse3, vertexPulse3, Integer.MAX_VALUE);
      edgePulse0.setNextE(edgePulse1);
      EdgePulse edgePulse2 = edgePulse0.getNext();
      EdgePulse edgePulse3 = edgePulse2.findEdgebyTarget(vertexPulse0);
      edgePulse0.setNextE(edgePulse2);
      edgePulse3.getNext();
      edgePulse2.getTarget();
      edgePulse3.getWeightDist();
  }

  @Test(timeout = 26000)
  public void test02()  throws Throwable  {
      VertexPulse vertexPulse0 = new VertexPulse(1126);
      vertexPulse0.addReversedEdge((EdgePulse) null);
      EdgePulse edgePulse0 = new EdgePulse(1126, 1126, vertexPulse0, vertexPulse0, 0);
      edgePulse0.setNextE((EdgePulse) null);
      edgePulse0.getID();
      EdgePulse edgePulse1 = edgePulse0.findEdgebyTarget(vertexPulse0);
      edgePulse1.getCompareCriteria();
      edgePulse1.getWeightTime();
  }

  @Test(timeout = 26000)
  public void test03()  throws Throwable  {
      VertexPulse vertexPulse0 = new VertexPulse(0);
      VertexPulse vertexPulse1 = vertexPulse0.getBRigthTime();
      EdgePulse edgePulse0 = new EdgePulse((-575), (-575), vertexPulse1, (VertexPulse) null, 0);
      edgePulse0.getTarget();
  }

  @Test(timeout = 26000)
  public void test04()  throws Throwable  {
      VertexPulse vertexPulse0 = new VertexPulse((-2539));
      EdgePulse edgePulse0 = new EdgePulse(0, 0, vertexPulse0, vertexPulse0, (-2539));
      EdgePulse edgePulse1 = vertexPulse0.getReversedEdges();
      edgePulse1.setNextE(edgePulse0);
      edgePulse0.addNextCommonTailEdge(edgePulse1);
      EdgePulse edgePulse2 = vertexPulse0.getReversedEdges();
      EdgePulse edgePulse3 = edgePulse0.findEdgebyTarget(vertexPulse0);
      edgePulse3.getWeightTime();
      edgePulse0.getCompareCriteria();
      edgePulse3.getID();
      edgePulse2.getSource();
  }

  @Test(timeout = 26000)
  public void test05()  throws Throwable  {
      VertexPulse vertexPulse0 = new VertexPulse(0);
      VertexPulse vertexPulse1 = vertexPulse0.getBLeftDist();
      VertexPulse vertexPulse2 = vertexPulse1.getBRigthTime();
      VertexPulse vertexPulse3 = vertexPulse2.getBRigthDist();
      EdgePulse edgePulse0 = new EdgePulse(0, 0, vertexPulse3, vertexPulse0, Integer.MAX_VALUE);
      edgePulse0.getWeightTime();
  }

  @Test(timeout = 26000)
  public void test06()  throws Throwable  {
      VertexPulse vertexPulse0 = new VertexPulse((-1192));
      VertexPulse vertexPulse1 = vertexPulse0.getBLeftDist();
      VertexPulse vertexPulse2 = vertexPulse1.getBLeftTime();
      VertexPulse vertexPulse3 = vertexPulse2.getBRigthTime();
      EdgePulse edgePulse0 = new EdgePulse((-1884), (-1192), vertexPulse3, vertexPulse0, 90);
      edgePulse0.getCompareCriteria();
  }

  @Test(timeout = 26000)
  public void test07()  throws Throwable  {
      EdgePulse edgePulse0 = new EdgePulse((-1266), (-1266), (VertexPulse) null, (VertexPulse) null, (-1266));
      VertexPulse vertexPulse0 = new VertexPulse(2716);
      EdgePulse edgePulse1 = new EdgePulse(1880, 1880, vertexPulse0, vertexPulse0, 2716);
      edgePulse0.addNextCommonTailEdge(edgePulse1);
      EdgePulse edgePulse2 = edgePulse0.getNext();
      edgePulse2.getTarget();
  }

  @Test(timeout = 26000)
  public void test08()  throws Throwable  {
      VertexPulse vertexPulse0 = new VertexPulse(0);
      VertexPulse vertexPulse1 = vertexPulse0.getBLeftTime();
      EdgePulse edgePulse0 = vertexPulse1.getReversedEdges();
      edgePulse0.getWeightTime();
      edgePulse0.getSource();
  }

  @Test(timeout = 26000)
  public void test09()  throws Throwable  {
      VertexPulse vertexPulse0 = new VertexPulse((-3414));
      VertexPulse vertexPulse1 = vertexPulse0.getBRigthTime();
      EdgePulse edgePulse0 = vertexPulse1.getReversedEdges();
      vertexPulse0.setMinTime((-1731));
      EdgePulse edgePulse1 = vertexPulse1.getReversedEdges();
      edgePulse0.addNextCommonTailEdge(edgePulse1);
      edgePulse0.getSource();
      edgePulse0.getCompareCriteria();
      edgePulse1.getSource();
  }

  @Test(timeout = 26000)
  public void test10()  throws Throwable  {
      VertexPulse vertexPulse0 = null;
      EdgePulse edgePulse0 = new EdgePulse(Integer.MAX_VALUE, Integer.MAX_VALUE, (VertexPulse) null, (VertexPulse) null, 0);
      // Undeclared exception!
      try { 
        edgePulse0.findEdgebyTarget((VertexPulse) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("dimacs9.EdgePulse", e);
      }
  }

  @Test(timeout = 26000)
  public void test11()  throws Throwable  {
      VertexPulse vertexPulse0 = new VertexPulse((-2363));
      VertexPulse vertexPulse1 = vertexPulse0.getBLeftTime();
      EdgePulse edgePulse0 = vertexPulse1.getReversedEdges();
      edgePulse0.getWeightDist();
      edgePulse0.getNext();
      edgePulse0.setNextE((EdgePulse) null);
      edgePulse0.getWeightDist();
      edgePulse0.setNextE((EdgePulse) null);
  }

  @Test(timeout = 26000)
  public void test12()  throws Throwable  {
      VertexPulse vertexPulse0 = new VertexPulse(0);
      VertexPulse vertexPulse1 = vertexPulse0.getBLeftDist();
      VertexPulse vertexPulse2 = vertexPulse1.getBRigthTime();
      vertexPulse1.reset();
      EdgePulse edgePulse0 = vertexPulse2.getReversedEdges();
      EdgePulse edgePulse1 = null;
      edgePulse0.setNextE((EdgePulse) null);
      edgePulse0.addNextCommonTailEdge((EdgePulse) null);
      edgePulse0.getCompareCriteria();
      vertexPulse1.LabelDist2 = (double) Integer.MAX_VALUE;
      vertexPulse2.reset();
      EdgePulse edgePulse2 = new EdgePulse(Integer.MAX_VALUE, 1958, vertexPulse2, vertexPulse0, (-1052));
      vertexPulse1.unLinkVertexDist();
      edgePulse0.setNextE(edgePulse2);
      edgePulse0.addNextCommonTailEdge((EdgePulse) null);
      edgePulse0.addNextCommonTailEdge(edgePulse2);
      vertexPulse0.setInsertedTime();
      vertexPulse0.setLeftDist(vertexPulse2);
      edgePulse2.getTarget();
      edgePulse0.getTarget();
      vertexPulse2.addReversedEdge(edgePulse0);
      edgePulse0.getID();
      edgePulse0.getSource();
      edgePulse2.addNextCommonTailEdge(edgePulse1);
      edgePulse2.getID();
      edgePulse0.getCompareCriteria();
      edgePulse0.getWeightTime();
      edgePulse0.addNextCommonTailEdge(edgePulse2);
      edgePulse2.setNextE(edgePulse1);
      edgePulse0.getNext();
      edgePulse0.findEdgebyTarget(vertexPulse0);
      edgePulse2.getSource();
  }

  @Test(timeout = 26000)
  public void test13()  throws Throwable  {
      VertexPulse vertexPulse0 = new VertexPulse((-3877));
      VertexPulse vertexPulse1 = vertexPulse0.getBRigthTime();
      EdgePulse edgePulse0 = new EdgePulse((-3877), (-3877), vertexPulse1, vertexPulse0, (-1324));
      EdgePulse edgePulse1 = edgePulse0.findEdgebyTarget(vertexPulse0);
      vertexPulse0.setRigthTime(vertexPulse1);
      edgePulse1.setNextE(edgePulse0);
      EdgePulse edgePulse2 = edgePulse1.getNext();
      vertexPulse1.setInsertedDist();
      edgePulse2.getCompareCriteria();
      edgePulse2.setNextE(edgePulse1);
      edgePulse0.getTarget();
      edgePulse2.getCompareCriteria();
      edgePulse0.getTarget();
      edgePulse2.getTarget();
      EdgePulse edgePulse3 = edgePulse1.getNext();
      edgePulse3.getSource();
      vertexPulse0.minDist = 0;
      edgePulse0.getID();
      EdgePulse edgePulse4 = edgePulse2.getNext();
      assertEquals(Integer.MAX_VALUE, edgePulse0.getCompareCriteria());
      assertEquals((-1324), edgePulse4.getID());
  }

  @Test(timeout = 26000)
  public void test14()  throws Throwable  {
      VertexPulse vertexPulse0 = new VertexPulse((-2593));
      VertexPulse vertexPulse1 = vertexPulse0.getBRigthTime();
      VertexPulse vertexPulse2 = vertexPulse1.getBLeftDist();
      vertexPulse2.insertVertexDist(vertexPulse0);
      EdgePulse edgePulse0 = vertexPulse2.getReversedEdges();
      int int0 = edgePulse0.getWeightDist();
      assertEquals(1, int0);
      
      int int1 = edgePulse0.getCompareCriteria();
      assertEquals(1, edgePulse0.getWeightTime());
      assertEquals((-2), int1);
      assertEquals((-1), edgePulse0.getID());
  }

  @Test(timeout = 26000)
  public void test15()  throws Throwable  {
      VertexPulse vertexPulse0 = new VertexPulse((-636));
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getCompareCriteria());
  }

  @Test(timeout = 26000)
  public void test16()  throws Throwable  {
      VertexPulse vertexPulse0 = new VertexPulse(0);
      VertexPulse vertexPulse1 = vertexPulse0.getBRigthDist();
      VertexPulse vertexPulse2 = vertexPulse1.getBRigthTime();
      VertexPulse vertexPulse3 = vertexPulse2.getBLeftTime();
      EdgePulse edgePulse0 = new EdgePulse(1482, (-2574), vertexPulse3, vertexPulse0, 0);
      ArrayList<Integer> arrayList0 = vertexPulse0.magicIndex;
      // Undeclared exception!
      try { 
        vertexPulse3.colocar(arrayList0, 2559, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 26000)
  public void test17()  throws Throwable  {
      VertexPulse vertexPulse0 = new VertexPulse((-2089));
      VertexPulse vertexPulse1 = vertexPulse0.getBRigthTime();
      VertexPulse vertexPulse2 = vertexPulse1.getBLeftDist();
      EdgePulse edgePulse0 = new EdgePulse(0, 0, vertexPulse2, vertexPulse2, Integer.MAX_VALUE);
      int int0 = edgePulse0.getWeightTime();
      assertEquals(Integer.MAX_VALUE, edgePulse0.getID());
      assertEquals(0, int0);
      assertEquals(0, edgePulse0.getWeightDist());
  }

  @Test(timeout = 26000)
  public void test18()  throws Throwable  {
      VertexPulse vertexPulse0 = new VertexPulse(0);
      VertexPulse vertexPulse1 = vertexPulse0.getBRigthDist();
      EdgePulse edgePulse0 = new EdgePulse(0, 0, vertexPulse1, vertexPulse0, (-3615));
      EdgePulse edgePulse1 = edgePulse0.findEdgebyTarget(vertexPulse0);
      assertNotNull(edgePulse1);
      
      edgePulse0.addNextCommonTailEdge(edgePulse1);
      assertEquals(0, edgePulse1.getWeightTime());
      assertEquals((-3615), edgePulse1.getID());
      assertEquals(0, edgePulse1.getWeightDist());
      assertEquals((-3615), edgePulse0.getID());
  }
}

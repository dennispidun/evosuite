/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 18 23:32:02 GMT 2022
 */

package dimacs9;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import dimacs9.EdgePulse;
import dimacs9.FinalVertexPulse;
import dimacs9.VertexPulse;
import java.util.ArrayList;
import org.junit.runner.RunWith;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class VertexPulse_ESTest extends VertexPulse_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      FinalVertexPulse finalVertexPulse0 = new FinalVertexPulse(0);
      boolean boolean0 = finalVertexPulse0.isInsertedTime();
      assertFalse(boolean0);
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      VertexPulse vertexPulse0 = new VertexPulse(5197);
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinTime());
      
      vertexPulse0.setMinTime(0);
      vertexPulse0.getBRigthDist();
      assertEquals(0, vertexPulse0.getMinTime());
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      VertexPulse vertexPulse0 = new VertexPulse(5197);
      vertexPulse0.setMaxTime(2147483638);
      assertEquals(2147483638, vertexPulse0.getMaxTime());
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      VertexPulse vertexPulse0 = new VertexPulse(5197);
      int int0 = vertexPulse0.getMinTime();
      assertEquals(0, vertexPulse0.getMaxTime());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getCompareCriteria());
      assertEquals(Integer.MAX_VALUE, int0);
      assertEquals(0, vertexPulse0.getMaxDist());
      assertFalse(vertexPulse0.isInserteDist());
      assertEquals(5197, vertexPulse0.getID());
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      VertexPulse vertexPulse0 = new VertexPulse(5197);
      vertexPulse0.reset();
      assertEquals(0, vertexPulse0.getMaxTime());
      assertEquals(0, vertexPulse0.getMaxDist());
      assertEquals(5197, vertexPulse0.getID());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinTime());
      assertFalse(vertexPulse0.isInserteDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinDist());
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      VertexPulse vertexPulse0 = new VertexPulse((-1));
      boolean boolean0 = vertexPulse0.isInserteDist();
      assertEquals(0, vertexPulse0.getMaxDist());
      assertEquals(0, vertexPulse0.getMaxTime());
      assertEquals((-1), vertexPulse0.getID());
      assertFalse(boolean0);
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinTime());
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      VertexPulse vertexPulse0 = new VertexPulse(5197);
      int int0 = vertexPulse0.getID();
      assertEquals(0, vertexPulse0.getMaxDist());
      assertFalse(vertexPulse0.isInserteDist());
      assertEquals(0, vertexPulse0.getMaxTime());
      assertEquals(5197, int0);
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinTime());
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      VertexPulse vertexPulse0 = new VertexPulse(3864);
      vertexPulse0.fastUnlinkDist();
      assertEquals(3864, vertexPulse0.getID());
      assertEquals(0, vertexPulse0.getMaxDist());
      assertEquals(0, vertexPulse0.getMaxTime());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinTime());
      assertFalse(vertexPulse0.isInserteDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinDist());
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      VertexPulse vertexPulse0 = new VertexPulse(5197);
      vertexPulse0.fastUnlinkTime();
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinTime());
      assertEquals(5197, vertexPulse0.getID());
      assertFalse(vertexPulse0.isInserteDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getCompareCriteria());
      assertEquals(0, vertexPulse0.getMaxTime());
      assertEquals(0, vertexPulse0.getMaxDist());
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      FinalVertexPulse finalVertexPulse0 = new FinalVertexPulse(0);
      finalVertexPulse0.unlinkRighBoundTime();
      VertexPulse vertexPulse0 = finalVertexPulse0.getBRigthTime();
      assertNull(vertexPulse0);
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      VertexPulse vertexPulse0 = new VertexPulse(336);
      vertexPulse0.unlinkRighBoundDist();
      vertexPulse0.getBRigthDist();
      assertFalse(vertexPulse0.isInserteDist());
      assertEquals(336, vertexPulse0.getID());
      assertEquals(0, vertexPulse0.getMaxDist());
      assertEquals(0, vertexPulse0.getMaxTime());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinTime());
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      VertexPulse vertexPulse0 = new VertexPulse(2147483639);
      int int0 = vertexPulse0.getMaxTime();
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinTime());
      assertFalse(vertexPulse0.isInserteDist());
      assertEquals(0, vertexPulse0.getMaxDist());
      assertEquals(0, int0);
      assertEquals(2147483639, vertexPulse0.getID());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getCompareCriteria());
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      VertexPulse vertexPulse0 = new VertexPulse((-1));
      EdgePulse edgePulse0 = vertexPulse0.getReversedEdges();
      assertNotNull(edgePulse0);
      
      vertexPulse0.addReversedEdge(edgePulse0);
      assertEquals((-2), edgePulse0.getCompareCriteria());
      assertEquals((-1), edgePulse0.getID());
      assertEquals(1, edgePulse0.getWeightDist());
      assertEquals(1, edgePulse0.getWeightTime());
      
      vertexPulse0.addReversedEdge((EdgePulse) null);
      assertFalse(vertexPulse0.isInserteDist());
      assertEquals((-1), vertexPulse0.getID());
      assertEquals(0, vertexPulse0.getMaxTime());
      assertEquals(0, vertexPulse0.getMaxDist());
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      VertexPulse vertexPulse0 = new VertexPulse(5197);
      boolean boolean0 = vertexPulse0.unLinkVertexDist();
      assertEquals(0, vertexPulse0.getMaxTime());
      assertFalse(vertexPulse0.isInserteDist());
      assertEquals(0, vertexPulse0.getMaxDist());
      assertTrue(boolean0);
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinTime());
      assertEquals(5197, vertexPulse0.getID());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getCompareCriteria());
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      VertexPulse vertexPulse0 = new VertexPulse(5197);
      boolean boolean0 = vertexPulse0.unLinkVertexTime();
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinTime());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getCompareCriteria());
      assertFalse(vertexPulse0.isInserteDist());
      assertTrue(boolean0);
      assertEquals(5197, vertexPulse0.getID());
      assertEquals(0, vertexPulse0.getMaxTime());
      assertEquals(0, vertexPulse0.getMaxDist());
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      VertexPulse vertexPulse0 = new VertexPulse((-3438));
      vertexPulse0.firstTime = false;
      // Undeclared exception!
      try { 
        vertexPulse0.pulse((-3438), (-2569), (ArrayList<Integer>) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3438
         //
         verifyException("dimacs9.VertexPulse", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      FinalVertexPulse finalVertexPulse0 = new FinalVertexPulse(0);
      ArrayList<Integer> arrayList0 = finalVertexPulse0.magicIndex;
      // Undeclared exception!
      try { 
        finalVertexPulse0.QS(arrayList0, 0, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      FinalVertexPulse finalVertexPulse0 = new FinalVertexPulse((-3613));
      VertexPulse vertexPulse0 = finalVertexPulse0.getBLeftTime();
      vertexPulse0.LabelDist3 = 0.0;
      boolean boolean0 = finalVertexPulse0.CheckLabels(Double.POSITIVE_INFINITY, 706.832);
      assertTrue(boolean0);
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      VertexPulse vertexPulse0 = new VertexPulse(5197);
      vertexPulse0.setRigthDist(vertexPulse0);
      assertEquals(5197, vertexPulse0.getID());
      assertEquals(0, vertexPulse0.getMaxTime());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinTime());
      assertFalse(vertexPulse0.isInserteDist());
      assertEquals(0, vertexPulse0.getMaxDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getCompareCriteria());
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      FinalVertexPulse finalVertexPulse0 = new FinalVertexPulse((-876));
      finalVertexPulse0.setRigthTime(finalVertexPulse0);
      assertFalse(finalVertexPulse0.isInserteDist());
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      FinalVertexPulse finalVertexPulse0 = new FinalVertexPulse(0);
      finalVertexPulse0.setLeftTime(finalVertexPulse0);
      assertFalse(finalVertexPulse0.isInserteDist());
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      VertexPulse vertexPulse0 = new VertexPulse((-3438));
      int int0 = vertexPulse0.getMinDist();
      assertFalse(vertexPulse0.isInserteDist());
      assertEquals(0, vertexPulse0.getMaxDist());
      assertEquals((-3438), vertexPulse0.getID());
      assertEquals(Integer.MAX_VALUE, int0);
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinTime());
      assertEquals(0, vertexPulse0.getMaxTime());
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      FinalVertexPulse finalVertexPulse0 = new FinalVertexPulse(3809);
      VertexPulse vertexPulse0 = new VertexPulse(0);
      finalVertexPulse0.insertVertexDist(vertexPulse0);
      assertEquals(0, vertexPulse0.getID());
      assertEquals(0, vertexPulse0.getMaxDist());
      assertEquals(0, vertexPulse0.getMaxTime());
      assertFalse(vertexPulse0.isInserteDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinTime());
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      FinalVertexPulse finalVertexPulse0 = new FinalVertexPulse((-3268));
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      finalVertexPulse0.QS(arrayList0, 612, 612);
      assertEquals(0, finalVertexPulse0.getMaxTime());
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      FinalVertexPulse finalVertexPulse0 = new FinalVertexPulse(1045);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      // Undeclared exception!
      try { 
        finalVertexPulse0.QS(arrayList0, (-1), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      FinalVertexPulse finalVertexPulse0 = new FinalVertexPulse(239);
      // Undeclared exception!
      try { 
        finalVertexPulse0.QS((ArrayList<Integer>) null, 2289, Integer.MAX_VALUE);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("dimacs9.VertexPulse", e);
      }
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      FinalVertexPulse finalVertexPulse0 = new FinalVertexPulse(Integer.MAX_VALUE);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      // Undeclared exception!
      try { 
        finalVertexPulse0.colocar(arrayList0, (-568), Integer.MAX_VALUE);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      FinalVertexPulse finalVertexPulse0 = new FinalVertexPulse(0);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      // Undeclared exception!
      try { 
        finalVertexPulse0.colocar(arrayList0, 597, 597);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 597, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      FinalVertexPulse finalVertexPulse0 = new FinalVertexPulse(0);
      // Undeclared exception!
      try { 
        finalVertexPulse0.colocar((ArrayList<Integer>) null, 0, 2028);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("dimacs9.VertexPulse", e);
      }
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      VertexPulse vertexPulse0 = new VertexPulse(5197);
      // Undeclared exception!
      try { 
        vertexPulse0.insertVertexDist((VertexPulse) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("dimacs9.VertexPulse", e);
      }
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      FinalVertexPulse finalVertexPulse0 = new FinalVertexPulse(Integer.MAX_VALUE);
      // Undeclared exception!
      try { 
        finalVertexPulse0.insertVertexTime((VertexPulse) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("dimacs9.VertexPulse", e);
      }
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      FinalVertexPulse finalVertexPulse0 = new FinalVertexPulse(0);
      // Undeclared exception!
      try { 
        finalVertexPulse0.pulse(1793, (-1149), (ArrayList<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("dimacs9.FinalVertexPulse", e);
      }
  }

  @Test(timeout = 11000)
  public void test32()  throws Throwable  {
      VertexPulse vertexPulse0 = new VertexPulse((-1771));
      vertexPulse0.unlinkRighBoundDist();
      // Undeclared exception!
      try { 
        vertexPulse0.unLinkVertexDist();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("dimacs9.VertexPulse", e);
      }
  }

  @Test(timeout = 11000)
  public void test33()  throws Throwable  {
      FinalVertexPulse finalVertexPulse0 = new FinalVertexPulse((-387));
      finalVertexPulse0.unlinkRighBoundTime();
      // Undeclared exception!
      try { 
        finalVertexPulse0.unLinkVertexTime();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("dimacs9.VertexPulse", e);
      }
  }

  @Test(timeout = 11000)
  public void test34()  throws Throwable  {
      FinalVertexPulse finalVertexPulse0 = new FinalVertexPulse(Integer.MAX_VALUE);
      finalVertexPulse0.setMinDist((-1208));
      VertexPulse vertexPulse0 = finalVertexPulse0.getBLeftDist();
      assertEquals((-1208), vertexPulse0.getMinDist());
  }

  @Test(timeout = 11000)
  public void test35()  throws Throwable  {
      FinalVertexPulse finalVertexPulse0 = new FinalVertexPulse((-2581));
      VertexPulse vertexPulse0 = finalVertexPulse0.getBLeftDist();
      assertFalse(vertexPulse0.isInserteDist());
  }

  @Test(timeout = 11000)
  public void test36()  throws Throwable  {
      FinalVertexPulse finalVertexPulse0 = new FinalVertexPulse(Integer.MAX_VALUE);
      finalVertexPulse0.setMaxDist((-2915));
      VertexPulse vertexPulse0 = finalVertexPulse0.getBLeftDist();
      assertFalse(vertexPulse0.isInsertedTime());
  }

  @Test(timeout = 11000)
  public void test37()  throws Throwable  {
      FinalVertexPulse finalVertexPulse0 = new FinalVertexPulse(Integer.MAX_VALUE);
      finalVertexPulse0.setBounds(2339, (-3190));
      VertexPulse vertexPulse0 = finalVertexPulse0.getBLeftDist();
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getCompareCriteria());
  }

  @Test(timeout = 11000)
  public void test38()  throws Throwable  {
      FinalVertexPulse finalVertexPulse0 = new FinalVertexPulse(Integer.MAX_VALUE);
      finalVertexPulse0.setMaxTime(Integer.MAX_VALUE);
      VertexPulse vertexPulse0 = finalVertexPulse0.getBLeftDist();
      assertFalse(vertexPulse0.isInsertedTime());
  }

  @Test(timeout = 11000)
  public void test39()  throws Throwable  {
      VertexPulse vertexPulse0 = new VertexPulse(5197);
      vertexPulse0.setMinTime((-19));
      vertexPulse0.getBLeftDist();
      assertEquals((-19), vertexPulse0.getMinTime());
  }

  @Test(timeout = 11000)
  public void test40()  throws Throwable  {
      FinalVertexPulse finalVertexPulse0 = new FinalVertexPulse(0);
      finalVertexPulse0.setMinTime(0);
      VertexPulse vertexPulse0 = finalVertexPulse0.getBLeftDist();
      assertSame(vertexPulse0, finalVertexPulse0);
  }

  @Test(timeout = 11000)
  public void test41()  throws Throwable  {
      FinalVertexPulse finalVertexPulse0 = new FinalVertexPulse(Integer.MAX_VALUE);
      finalVertexPulse0.setInsertedDist();
      VertexPulse vertexPulse0 = finalVertexPulse0.getBLeftDist();
      assertSame(vertexPulse0, finalVertexPulse0);
  }

  @Test(timeout = 11000)
  public void test42()  throws Throwable  {
      FinalVertexPulse finalVertexPulse0 = new FinalVertexPulse(Integer.MAX_VALUE);
      finalVertexPulse0.setInsertedTime();
      finalVertexPulse0.getBLeftDist();
      assertTrue(finalVertexPulse0.isInsertedTime());
  }

  @Test(timeout = 11000)
  public void test43()  throws Throwable  {
      FinalVertexPulse finalVertexPulse0 = new FinalVertexPulse(Integer.MAX_VALUE);
      finalVertexPulse0.setMinDist((-1208));
      VertexPulse vertexPulse0 = finalVertexPulse0.getBLeftTime();
      assertSame(vertexPulse0, finalVertexPulse0);
  }

  @Test(timeout = 11000)
  public void test44()  throws Throwable  {
      FinalVertexPulse finalVertexPulse0 = new FinalVertexPulse(Integer.MAX_VALUE);
      finalVertexPulse0.setMinDist(0);
      VertexPulse vertexPulse0 = finalVertexPulse0.getBLeftTime();
      assertEquals(0, vertexPulse0.getMaxDist());
  }

  @Test(timeout = 11000)
  public void test45()  throws Throwable  {
      VertexPulse vertexPulse0 = new VertexPulse((-3438));
      assertEquals(0, vertexPulse0.getMaxDist());
      
      vertexPulse0.maxDist = (-3438);
      vertexPulse0.getBLeftTime();
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinTime());
  }

  @Test(timeout = 11000)
  public void test46()  throws Throwable  {
      FinalVertexPulse finalVertexPulse0 = new FinalVertexPulse((-3268));
      finalVertexPulse0.setBounds(612, (-11));
      VertexPulse vertexPulse0 = finalVertexPulse0.getBLeftTime();
      assertEquals((-2147483035), vertexPulse0.getMaxTime());
  }

  @Test(timeout = 11000)
  public void test47()  throws Throwable  {
      VertexPulse vertexPulse0 = new VertexPulse(5197);
      vertexPulse0.setMaxTime(Integer.MAX_VALUE);
      vertexPulse0.getBLeftTime();
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMaxTime());
  }

  @Test(timeout = 11000)
  public void test48()  throws Throwable  {
      FinalVertexPulse finalVertexPulse0 = new FinalVertexPulse(0);
      finalVertexPulse0.setMinTime(0);
      VertexPulse vertexPulse0 = finalVertexPulse0.getBLeftTime();
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
  }

  @Test(timeout = 11000)
  public void test49()  throws Throwable  {
      VertexPulse vertexPulse0 = new VertexPulse(5197);
      assertFalse(vertexPulse0.isInserteDist());
      
      vertexPulse0.setInsertedDist();
      vertexPulse0.getBLeftTime();
      assertTrue(vertexPulse0.isInserteDist());
  }

  @Test(timeout = 11000)
  public void test50()  throws Throwable  {
      FinalVertexPulse finalVertexPulse0 = new FinalVertexPulse((-3268));
      finalVertexPulse0.setInsertedTime();
      finalVertexPulse0.getBLeftTime();
      assertTrue(finalVertexPulse0.isInsertedTime());
  }

  @Test(timeout = 11000)
  public void test51()  throws Throwable  {
      FinalVertexPulse finalVertexPulse0 = new FinalVertexPulse(Integer.MAX_VALUE);
      finalVertexPulse0.setMinDist((-1208));
      VertexPulse vertexPulse0 = finalVertexPulse0.getBRigthDist();
      assertSame(vertexPulse0, finalVertexPulse0);
  }

  @Test(timeout = 11000)
  public void test52()  throws Throwable  {
      FinalVertexPulse finalVertexPulse0 = new FinalVertexPulse(0);
      finalVertexPulse0.minDist = 0;
      VertexPulse vertexPulse0 = finalVertexPulse0.getBRigthDist();
      assertFalse(vertexPulse0.isInsertedTime());
  }

  @Test(timeout = 11000)
  public void test53()  throws Throwable  {
      FinalVertexPulse finalVertexPulse0 = new FinalVertexPulse(4);
      finalVertexPulse0.setBounds(4, 3);
      VertexPulse vertexPulse0 = finalVertexPulse0.getBRigthDist();
      assertEquals(4, vertexPulse0.getID());
  }

  @Test(timeout = 11000)
  public void test54()  throws Throwable  {
      FinalVertexPulse finalVertexPulse0 = new FinalVertexPulse((-1068));
      finalVertexPulse0.setMaxDist(Integer.MAX_VALUE);
      VertexPulse vertexPulse0 = finalVertexPulse0.getBRigthDist();
      assertSame(vertexPulse0, finalVertexPulse0);
  }

  @Test(timeout = 11000)
  public void test55()  throws Throwable  {
      FinalVertexPulse finalVertexPulse0 = new FinalVertexPulse(425);
      finalVertexPulse0.setMaxTime(425);
      VertexPulse vertexPulse0 = finalVertexPulse0.getBRigthDist();
      assertSame(finalVertexPulse0, vertexPulse0);
  }

  @Test(timeout = 11000)
  public void test56()  throws Throwable  {
      FinalVertexPulse finalVertexPulse0 = new FinalVertexPulse(425);
      finalVertexPulse0.setMinTime((-4476));
      VertexPulse vertexPulse0 = finalVertexPulse0.getBRigthDist();
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
  }

  @Test(timeout = 11000)
  public void test57()  throws Throwable  {
      FinalVertexPulse finalVertexPulse0 = new FinalVertexPulse(425);
      finalVertexPulse0.setInsertedDist();
      VertexPulse vertexPulse0 = finalVertexPulse0.getBRigthDist();
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinTime());
  }

  @Test(timeout = 11000)
  public void test58()  throws Throwable  {
      FinalVertexPulse finalVertexPulse0 = new FinalVertexPulse(990);
      finalVertexPulse0.setInsertedTime();
      finalVertexPulse0.getBRigthDist();
      assertTrue(finalVertexPulse0.isInsertedTime());
  }

  @Test(timeout = 11000)
  public void test59()  throws Throwable  {
      FinalVertexPulse finalVertexPulse0 = new FinalVertexPulse(0);
      finalVertexPulse0.minDist = (-359);
      VertexPulse vertexPulse0 = finalVertexPulse0.getBRigthTime();
      assertEquals(0, vertexPulse0.getMaxTime());
  }

  @Test(timeout = 11000)
  public void test60()  throws Throwable  {
      FinalVertexPulse finalVertexPulse0 = new FinalVertexPulse(Integer.MAX_VALUE);
      finalVertexPulse0.setMinDist(0);
      VertexPulse vertexPulse0 = finalVertexPulse0.getBRigthTime();
      assertEquals(0, vertexPulse0.getMaxTime());
  }

  @Test(timeout = 11000)
  public void test61()  throws Throwable  {
      FinalVertexPulse finalVertexPulse0 = new FinalVertexPulse((-3268));
      finalVertexPulse0.setBounds(612, (-11));
      VertexPulse vertexPulse0 = finalVertexPulse0.getBRigthTime();
      assertSame(finalVertexPulse0, vertexPulse0);
  }

  @Test(timeout = 11000)
  public void test62()  throws Throwable  {
      FinalVertexPulse finalVertexPulse0 = new FinalVertexPulse(833);
      finalVertexPulse0.setMaxTime(76);
      VertexPulse vertexPulse0 = finalVertexPulse0.getBRigthTime();
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinDist());
  }

  @Test(timeout = 11000)
  public void test63()  throws Throwable  {
      VertexPulse vertexPulse0 = new VertexPulse((-1987));
      vertexPulse0.setMinTime((-4433));
      vertexPulse0.getBRigthTime();
      assertEquals((-4433), vertexPulse0.getMinTime());
  }

  @Test(timeout = 11000)
  public void test64()  throws Throwable  {
      VertexPulse vertexPulse0 = new VertexPulse(5197);
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinTime());
      
      vertexPulse0.setMinTime(0);
      vertexPulse0.getBRigthTime();
      assertEquals(0, vertexPulse0.getMinTime());
  }

  @Test(timeout = 11000)
  public void test65()  throws Throwable  {
      VertexPulse vertexPulse0 = new VertexPulse(5197);
      assertFalse(vertexPulse0.isInserteDist());
      
      vertexPulse0.setInsertedDist();
      vertexPulse0.getBRigthTime();
      assertTrue(vertexPulse0.isInserteDist());
  }

  @Test(timeout = 11000)
  public void test66()  throws Throwable  {
      FinalVertexPulse finalVertexPulse0 = new FinalVertexPulse((-3268));
      finalVertexPulse0.setInsertedTime();
      finalVertexPulse0.getBRigthTime();
      assertTrue(finalVertexPulse0.isInsertedTime());
  }

  @Test(timeout = 11000)
  public void test67()  throws Throwable  {
      FinalVertexPulse finalVertexPulse0 = new FinalVertexPulse(Integer.MAX_VALUE);
      finalVertexPulse0.setMinDist(0);
      int int0 = finalVertexPulse0.getCompareCriteria();
      assertEquals(0, int0);
  }

  @Test(timeout = 11000)
  public void test68()  throws Throwable  {
      FinalVertexPulse finalVertexPulse0 = new FinalVertexPulse((-876));
      int int0 = finalVertexPulse0.getID();
      assertEquals((-876), int0);
  }

  @Test(timeout = 11000)
  public void test69()  throws Throwable  {
      FinalVertexPulse finalVertexPulse0 = new FinalVertexPulse(0);
      int int0 = finalVertexPulse0.getID();
      assertEquals(0, int0);
  }

  @Test(timeout = 11000)
  public void test70()  throws Throwable  {
      FinalVertexPulse finalVertexPulse0 = new FinalVertexPulse((-3268));
      finalVertexPulse0.setBounds(612, (-11));
      int int0 = finalVertexPulse0.getMaxDist();
      assertEquals(2147483638, int0);
  }

  @Test(timeout = 11000)
  public void test71()  throws Throwable  {
      FinalVertexPulse finalVertexPulse0 = new FinalVertexPulse((-1));
      finalVertexPulse0.setBounds((-1), (-1));
      int int0 = finalVertexPulse0.getMaxTime();
      assertEquals(Integer.MIN_VALUE, int0);
  }

  @Test(timeout = 11000)
  public void test72()  throws Throwable  {
      VertexPulse vertexPulse0 = new VertexPulse(5197);
      assertEquals(0, vertexPulse0.getMaxTime());
      
      vertexPulse0.setMaxTime(Integer.MAX_VALUE);
      int int0 = vertexPulse0.getMaxTime();
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 11000)
  public void test73()  throws Throwable  {
      FinalVertexPulse finalVertexPulse0 = new FinalVertexPulse(Integer.MAX_VALUE);
      finalVertexPulse0.setMinDist((-1208));
      int int0 = finalVertexPulse0.getMinDist();
      assertEquals((-1208), int0);
  }

  @Test(timeout = 11000)
  public void test74()  throws Throwable  {
      FinalVertexPulse finalVertexPulse0 = new FinalVertexPulse(0);
      finalVertexPulse0.minDist = 0;
      int int0 = finalVertexPulse0.getMinDist();
      assertEquals(0, int0);
  }

  @Test(timeout = 11000)
  public void test75()  throws Throwable  {
      VertexPulse vertexPulse0 = new VertexPulse(5197);
      vertexPulse0.setMinTime((-325));
      int int0 = vertexPulse0.getMinTime();
      assertEquals((-325), int0);
  }

  @Test(timeout = 11000)
  public void test76()  throws Throwable  {
      VertexPulse vertexPulse0 = new VertexPulse(5197);
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinTime());
      
      vertexPulse0.setMinTime(0);
      int int0 = vertexPulse0.getMinTime();
      assertEquals(0, int0);
  }

  @Test(timeout = 11000)
  public void test77()  throws Throwable  {
      FinalVertexPulse finalVertexPulse0 = new FinalVertexPulse(0);
      finalVertexPulse0.setMinTime(0);
      EdgePulse edgePulse0 = finalVertexPulse0.getReversedEdges();
      assertEquals(1, edgePulse0.getWeightTime());
  }

  @Test(timeout = 11000)
  public void test78()  throws Throwable  {
      FinalVertexPulse finalVertexPulse0 = new FinalVertexPulse(0);
      finalVertexPulse0.setInsertedDist();
      boolean boolean0 = finalVertexPulse0.isInserteDist();
      assertTrue(boolean0);
  }

  @Test(timeout = 11000)
  public void test79()  throws Throwable  {
      FinalVertexPulse finalVertexPulse0 = new FinalVertexPulse(0);
      assertFalse(finalVertexPulse0.isInsertedTime());
      
      finalVertexPulse0.setInsertedTime();
      boolean boolean0 = finalVertexPulse0.isInsertedTime();
      assertTrue(boolean0);
  }

  @Test(timeout = 11000)
  public void test80()  throws Throwable  {
      FinalVertexPulse finalVertexPulse0 = new FinalVertexPulse((-1068));
      FinalVertexPulse finalVertexPulse1 = new FinalVertexPulse(Integer.MAX_VALUE);
      finalVertexPulse0.insertVertexDist(finalVertexPulse1);
      boolean boolean0 = finalVertexPulse0.unLinkVertexDist();
      assertFalse(boolean0);
  }

  @Test(timeout = 11000)
  public void test81()  throws Throwable  {
      FinalVertexPulse finalVertexPulse0 = new FinalVertexPulse((-876));
      finalVertexPulse0.setLeftDist(finalVertexPulse0);
      assertEquals(Integer.MAX_VALUE, finalVertexPulse0.getMinDist());
  }

  @Test(timeout = 11000)
  public void test82()  throws Throwable  {
      FinalVertexPulse finalVertexPulse0 = new FinalVertexPulse((-537));
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      finalVertexPulse0.pulse(Integer.MAX_VALUE, 2, arrayList0);
      assertEquals(0, finalVertexPulse0.getMaxTime());
  }

  @Test(timeout = 11000)
  public void test83()  throws Throwable  {
      VertexPulse vertexPulse0 = new VertexPulse((-1));
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getCompareCriteria());
      
      vertexPulse0.setMinDist((-1));
      assertEquals((-1), vertexPulse0.getCompareCriteria());
  }

  @Test(timeout = 11000)
  public void test84()  throws Throwable  {
      VertexPulse vertexPulse0 = new VertexPulse(5197);
      vertexPulse0.minDist = 5197;
      int int0 = vertexPulse0.getCompareCriteria();
      assertEquals(5197, vertexPulse0.getMinDist());
      assertEquals(5197, int0);
  }

  @Test(timeout = 11000)
  public void test85()  throws Throwable  {
      VertexPulse vertexPulse0 = new VertexPulse((-1));
      vertexPulse0.setMaxDist((-1));
      assertEquals((-1), vertexPulse0.getMaxDist());
  }

  @Test(timeout = 11000)
  public void test86()  throws Throwable  {
      VertexPulse vertexPulse0 = new VertexPulse(549);
      vertexPulse0.setMaxTime(Integer.MAX_VALUE);
      int int0 = vertexPulse0.getMaxDist();
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMaxTime());
      assertEquals(0, int0);
  }

  @Test(timeout = 11000)
  public void test87()  throws Throwable  {
      VertexPulse vertexPulse0 = new VertexPulse(549);
      FinalVertexPulse finalVertexPulse0 = new FinalVertexPulse(0);
      vertexPulse0.insertVertexDist(finalVertexPulse0);
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinTime());
      assertEquals(549, vertexPulse0.getID());
      assertEquals(0, vertexPulse0.getMaxTime());
      assertFalse(vertexPulse0.isInserteDist());
      assertEquals(0, vertexPulse0.getMaxDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinDist());
  }

  @Test(timeout = 11000)
  public void test88()  throws Throwable  {
      FinalVertexPulse finalVertexPulse0 = new FinalVertexPulse((-537));
      FinalVertexPulse finalVertexPulse1 = new FinalVertexPulse(Integer.MAX_VALUE);
      finalVertexPulse0.insertVertexTime(finalVertexPulse1);
      assertEquals(Integer.MAX_VALUE, finalVertexPulse0.getCompareCriteria());
  }

  @Test(timeout = 11000)
  public void test89()  throws Throwable  {
      FinalVertexPulse finalVertexPulse0 = new FinalVertexPulse((-3613));
      VertexPulse vertexPulse0 = finalVertexPulse0.getBLeftTime();
      vertexPulse0.LabelTime1 = (-1.0);
      boolean boolean0 = finalVertexPulse0.CheckLabels(Double.POSITIVE_INFINITY, 706.832);
      assertFalse(boolean0);
  }

  @Test(timeout = 11000)
  public void test90()  throws Throwable  {
      FinalVertexPulse finalVertexPulse0 = new FinalVertexPulse((-3613));
      finalVertexPulse0.LabelDist1 = (double) Integer.MAX_VALUE;
      boolean boolean0 = finalVertexPulse0.CheckLabels(Double.POSITIVE_INFINITY, 706.832);
      assertFalse(boolean0);
  }

  @Test(timeout = 11000)
  public void test91()  throws Throwable  {
      FinalVertexPulse finalVertexPulse0 = new FinalVertexPulse((-1068));
      finalVertexPulse0.LabelTime3 = 176.003;
      boolean boolean0 = finalVertexPulse0.CheckLabels(1707.0, (-1068));
      assertFalse(boolean0);
  }

  @Test(timeout = 11000)
  public void test92()  throws Throwable  {
      FinalVertexPulse finalVertexPulse0 = new FinalVertexPulse(Integer.MAX_VALUE);
      finalVertexPulse0.LabelTime2 = (-3269.51919);
      boolean boolean0 = finalVertexPulse0.CheckLabels((-467.94592), Integer.MAX_VALUE);
      assertFalse(boolean0);
  }

  @Test(timeout = 11000)
  public void test93()  throws Throwable  {
      FinalVertexPulse finalVertexPulse0 = new FinalVertexPulse((-3613));
      VertexPulse vertexPulse0 = finalVertexPulse0.getBRigthTime();
      vertexPulse0.LabelTime3 = (double) Integer.MAX_VALUE;
      boolean boolean0 = finalVertexPulse0.CheckLabels(Double.POSITIVE_INFINITY, 706.832);
      assertFalse(boolean0);
  }

  @Test(timeout = 11000)
  public void test94()  throws Throwable  {
      VertexPulse vertexPulse0 = new VertexPulse(336);
      vertexPulse0.LabelTime1 = (double) Integer.MAX_VALUE;
      // Undeclared exception!
      try { 
        vertexPulse0.pulse(336, (-2569), (ArrayList<Integer>) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 336
         //
         verifyException("dimacs9.VertexPulse", e);
      }
  }

  @Test(timeout = 11000)
  public void test95()  throws Throwable  {
      VertexPulse vertexPulse0 = new VertexPulse((-3438));
      vertexPulse0.LabelTime2 = 4572.49814939406;
      // Undeclared exception!
      try { 
        vertexPulse0.pulse((-3438), 1979, (ArrayList<Integer>) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3438
         //
         verifyException("dimacs9.VertexPulse", e);
      }
  }

  @Test(timeout = 11000)
  public void test96()  throws Throwable  {
      VertexPulse vertexPulse0 = new VertexPulse((-3438));
      vertexPulse0.LabelTime3 = 1.0;
      // Undeclared exception!
      try { 
        vertexPulse0.pulse((-3438), (-2569), (ArrayList<Integer>) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3438
         //
         verifyException("dimacs9.VertexPulse", e);
      }
  }

  @Test(timeout = 11000)
  public void test97()  throws Throwable  {
      VertexPulse vertexPulse0 = new VertexPulse(336);
      vertexPulse0.LabelDist3 = (-3723.7);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      // Undeclared exception!
      try { 
        vertexPulse0.pulse(336, 336, arrayList0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 336
         //
         verifyException("dimacs9.VertexPulse", e);
      }
  }
}

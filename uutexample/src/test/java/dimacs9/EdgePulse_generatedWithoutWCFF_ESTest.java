/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 21 16:26:51 GMT 2022
 */

package dimacs9;

import com.sun.tools.javac.util.List;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;

import java.util.ArrayList;
import org.junit.runner.RunWith;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class EdgePulse_generatedWithoutWCFF_ESTest extends EdgePulse_generatedWithoutWCFF_ESTest_scaffolding {

  @Test(timeout = 26000)
  public void test00()  throws Throwable  {
      VertexPulse vertexPulse0 = new VertexPulse(0);
      EdgePulse edgePulse0 = vertexPulse0.getReversedEdges();
      vertexPulse0.setMinTime(0);
      EdgePulse edgePulse1 = new EdgePulse(0, 0, vertexPulse0, vertexPulse0, (-1));
      vertexPulse0.setMinDist((-1));
      vertexPulse0.unlinkRighBoundDist();
      vertexPulse0.maxTime = (-1);
      edgePulse1.getTarget();
      edgePulse1.getTarget();
      edgePulse0.addNextCommonTailEdge(edgePulse1);
      edgePulse1.getTarget();
      edgePulse1.getWeightTime();
      edgePulse1.getTarget();
  }

  @Test(timeout = 26000)
  public void test01()  throws Throwable  {
      VertexPulse vertexPulse0 = new VertexPulse(0);
      EdgePulse edgePulse0 = vertexPulse0.getReversedEdges();
      EdgePulse edgePulse1 = new EdgePulse(0, 0, vertexPulse0, vertexPulse0, (-1));
      vertexPulse0.setMinDist((-1));
      vertexPulse0.unlinkRighBoundDist();
      vertexPulse0.maxTime = (-1);
      VertexPulse vertexPulse1 = new VertexPulse((-1));
      vertexPulse0.setMinDist(0);
      edgePulse1.getTarget();
      edgePulse0.addNextCommonTailEdge(edgePulse1);
      edgePulse1.getTarget();
      edgePulse1.getWeightTime();
      edgePulse0.getSource();
  }

  @Test(timeout = 26000)
  public void test02()  throws Throwable  {
      VertexPulse vertexPulse0 = new VertexPulse((-151));
      VertexPulse vertexPulse1 = vertexPulse0.getBLeftTime();
      VertexPulse vertexPulse2 = vertexPulse1.getBLeftDist();
      vertexPulse1.LabelDist3 = (double) Integer.MAX_VALUE;
      vertexPulse1.setInsertedDist();
      EdgePulse edgePulse0 = vertexPulse2.getReversedEdges();
      EdgePulse edgePulse1 = edgePulse0.findEdgebyTarget(vertexPulse0);
      edgePulse1.setNextE(edgePulse0);
      edgePulse1.setNextE(edgePulse0);
      EdgePulse edgePulse2 = edgePulse1.getNext();
      edgePulse0.getCompareCriteria();
      VertexPulse vertexPulse3 = edgePulse2.getSource();
      vertexPulse3.setMaxTime((-2939));
      edgePulse0.getTarget();
      edgePulse1.setNextE(edgePulse0);
      vertexPulse1.setInsertedDist();
      vertexPulse3.maxTime = (-2);
      edgePulse0.getCompareCriteria();
      vertexPulse3.LabelTime2 = 0.0;
      vertexPulse0.unlinkRighBoundTime();
      edgePulse0.findEdgebyTarget(vertexPulse1);
      EdgePulse edgePulse3 = edgePulse2.findEdgebyTarget(vertexPulse3);
      VertexPulse vertexPulse4 = edgePulse0.getTarget();
      EdgePulse edgePulse4 = edgePulse3.findEdgebyTarget(vertexPulse4);
      edgePulse3.getCompareCriteria();
      edgePulse4.getCompareCriteria();
  }

  @Test(timeout = 26000)
  public void test03()  throws Throwable  {
      VertexPulse vertexPulse0 = new VertexPulse(0);
      EdgePulse edgePulse0 = vertexPulse0.getReversedEdges();
      EdgePulse edgePulse1 = new EdgePulse(Integer.MAX_VALUE, Integer.MAX_VALUE, vertexPulse0, vertexPulse0, 0);
      edgePulse0.addNextCommonTailEdge(edgePulse1);
      EdgePulse edgePulse2 = edgePulse0.findEdgebyTarget(vertexPulse0);
      EdgePulse edgePulse3 = edgePulse2.findEdgebyTarget(vertexPulse0);
      edgePulse0.getID();
      vertexPulse0.setInsertedDist();
      edgePulse2.getID();
      edgePulse3.getTarget();
  }

  @Test(timeout = 26000)
  public void test04()  throws Throwable  {
      VertexPulse vertexPulse0 = new VertexPulse(0);
      EdgePulse edgePulse0 = vertexPulse0.getReversedEdges();
      EdgePulse edgePulse1 = new EdgePulse(0, 0, vertexPulse0, vertexPulse0, (-1));
      vertexPulse0.setMinDist((-1));
      vertexPulse0.unlinkRighBoundDist();
      vertexPulse0.maxTime = (-1);
      edgePulse0.setNextE(edgePulse1);
      edgePulse1.getTarget();
      edgePulse1.getTarget();
      edgePulse0.addNextCommonTailEdge(edgePulse1);
      assertEquals(1, edgePulse0.getWeightDist());
      assertEquals(1, edgePulse0.getWeightTime());
      
      edgePulse1.getTarget();
      edgePulse1.getWeightTime();
      edgePulse1.getSource();
      assertEquals((-1), edgePulse1.getID());
      
      edgePulse1.getNext();
  }

  @Test(timeout = 26000)
  public void test05()  throws Throwable  {
      VertexPulse vertexPulse0 = new VertexPulse(1144);
      VertexPulse vertexPulse1 = vertexPulse0.getBRigthDist();
      VertexPulse vertexPulse2 = vertexPulse1.getBLeftTime();
      vertexPulse0.fastUnlinkTime();
      EdgePulse edgePulse0 = new EdgePulse(1144, 1144, vertexPulse2, vertexPulse1, Integer.MAX_VALUE);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      vertexPulse1.magicIndex = arrayList0;
      vertexPulse0.unLinkVertexDist();
      edgePulse0.setNextE((EdgePulse) null);
      vertexPulse2.setMinTime((-397));
      vertexPulse1.insertVertexDist(vertexPulse2);
      Object object0 = new Object();
      vertexPulse2.LabelTime2 = (-3647.61);
      Object object1 = new Object();
      Integer integer0 = new Integer((-631));
      List.of((Object) vertexPulse0, object0, object1, (Object) arrayList0, (Object) integer0);
      VertexPulse vertexPulse3 = edgePulse0.getSource();
      vertexPulse0.setLeftTime(vertexPulse3);
      vertexPulse1.addReversedEdge(edgePulse0);
      edgePulse0.getSource();
      edgePulse0.getCompareCriteria();
      edgePulse0.setNextE((EdgePulse) null);
      edgePulse0.getWeightTime();
      edgePulse0.getSource();
      edgePulse0.getCompareCriteria();
  }

  @Test(timeout = 26000)
  public void test06()  throws Throwable  {
      VertexPulse vertexPulse0 = new VertexPulse(0);
      EdgePulse edgePulse0 = vertexPulse0.getReversedEdges();
      vertexPulse0.setInsertedTime();
      EdgePulse edgePulse1 = new EdgePulse(Integer.MAX_VALUE, Integer.MAX_VALUE, vertexPulse0, vertexPulse0, 0);
      edgePulse1.addNextCommonTailEdge(edgePulse0);
      edgePulse0.addNextCommonTailEdge(edgePulse1);
      EdgePulse edgePulse2 = edgePulse0.findEdgebyTarget(vertexPulse0);
      EdgePulse edgePulse3 = edgePulse2.findEdgebyTarget(vertexPulse0);
      edgePulse3.setNextE(edgePulse0);
      edgePulse0.getID();
      edgePulse2.getID();
      edgePulse0.getTarget();
  }

  @Test(timeout = 26000)
  public void test07()  throws Throwable  {
      VertexPulse vertexPulse0 = new VertexPulse(1144);
      VertexPulse vertexPulse1 = vertexPulse0.getBRigthDist();
      VertexPulse vertexPulse2 = vertexPulse1.getBLeftTime();
      vertexPulse0.fastUnlinkTime();
      EdgePulse edgePulse0 = new EdgePulse(1144, 1144, vertexPulse2, vertexPulse1, Integer.MAX_VALUE);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      vertexPulse1.magicIndex = arrayList0;
      vertexPulse0.unLinkVertexDist();
      edgePulse0.setNextE((EdgePulse) null);
      vertexPulse2.setMinTime(0);
      vertexPulse1.insertVertexDist(vertexPulse2);
      Object object0 = new Object();
      Object object1 = new Object();
      Integer integer0 = new Integer((-631));
      List.of((Object) vertexPulse0, object0, object1, (Object) arrayList0, (Object) integer0);
      VertexPulse vertexPulse3 = edgePulse0.getSource();
      vertexPulse0.setLeftTime(vertexPulse3);
      vertexPulse1.addReversedEdge(edgePulse0);
      vertexPulse2.LabelDist3 = (-3265.3628462490733);
      edgePulse0.getSource();
      edgePulse0.getCompareCriteria();
      edgePulse0.setNextE((EdgePulse) null);
      edgePulse0.getWeightTime();
      edgePulse0.getSource();
      edgePulse0.getCompareCriteria();
      edgePulse0.findEdgebyTarget(vertexPulse1);
  }

  @Test(timeout = 26000)
  public void test08()  throws Throwable  {
      VertexPulse vertexPulse0 = null;
      EdgePulse edgePulse0 = new EdgePulse(965, 965, (VertexPulse) null, (VertexPulse) null, 965);
      edgePulse0.setNextE(edgePulse0);
      edgePulse0.getSource();
      edgePulse0.setNextE(edgePulse0);
      edgePulse0.setNextE(edgePulse0);
      edgePulse0.getID();
      EdgePulse edgePulse1 = edgePulse0.getNext();
      // Undeclared exception!
      try { 
        edgePulse1.findEdgebyTarget((VertexPulse) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("dimacs9.EdgePulse", e);
      }
  }

  @Test(timeout = 26000)
  public void test09()  throws Throwable  {
      VertexPulse vertexPulse0 = new VertexPulse(0);
      EdgePulse edgePulse0 = vertexPulse0.getReversedEdges();
      vertexPulse0.setMinDist(0);
      vertexPulse0.unlinkRighBoundDist();
      vertexPulse0.maxTime = Integer.MAX_VALUE;
      edgePulse0.getTarget();
      vertexPulse0.getBLeftDist();
  }

  @Test(timeout = 26000)
  public void test10()  throws Throwable  {
      VertexPulse vertexPulse0 = new VertexPulse((-6));
      VertexPulse vertexPulse1 = vertexPulse0.getBRigthDist();
      EdgePulse edgePulse0 = vertexPulse1.getReversedEdges();
      edgePulse0.getTarget();
  }

  @Test(timeout = 26000)
  public void test11()  throws Throwable  {
      VertexPulse vertexPulse0 = new VertexPulse((-1));
      EdgePulse edgePulse0 = new EdgePulse((-1098), (-5144), vertexPulse0, vertexPulse0, Integer.MAX_VALUE);
      EdgePulse edgePulse1 = edgePulse0.findEdgebyTarget(vertexPulse0);
      edgePulse1.getCompareCriteria();
  }

  @Test(timeout = 26000)
  public void test12()  throws Throwable  {
      VertexPulse vertexPulse0 = null;
      EdgePulse edgePulse0 = new EdgePulse(965, 965, (VertexPulse) null, (VertexPulse) null, 965);
      edgePulse0.setNextE(edgePulse0);
      edgePulse0.getTarget();
      edgePulse0.setNextE(edgePulse0);
      edgePulse0.setNextE(edgePulse0);
      edgePulse0.getID();
      EdgePulse edgePulse1 = edgePulse0.getNext();
      // Undeclared exception!
      try { 
        edgePulse1.findEdgebyTarget((VertexPulse) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("dimacs9.EdgePulse", e);
      }
  }

  @Test(timeout = 26000)
  public void test13()  throws Throwable  {
      VertexPulse vertexPulse0 = new VertexPulse(1144);
      vertexPulse0.setInsertedTime();
      VertexPulse vertexPulse1 = vertexPulse0.getBRigthDist();
      VertexPulse vertexPulse2 = vertexPulse1.getBLeftTime();
      vertexPulse0.fastUnlinkTime();
      EdgePulse edgePulse0 = new EdgePulse(1144, 1144, vertexPulse2, vertexPulse1, Integer.MAX_VALUE);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      vertexPulse1.magicIndex = arrayList0;
      vertexPulse0.unLinkVertexDist();
      edgePulse0.setNextE((EdgePulse) null);
      vertexPulse1.minTime = 1144;
      vertexPulse1.insertVertexDist(vertexPulse2);
      Object object0 = new Object();
      Object object1 = new Object();
      Integer integer0 = new Integer((-631));
      List.of((Object) vertexPulse0, object0, object1, (Object) arrayList0, (Object) integer0);
      VertexPulse vertexPulse3 = edgePulse0.getSource();
      vertexPulse0.setLeftTime(vertexPulse3);
      vertexPulse1.addReversedEdge(edgePulse0);
      edgePulse0.getSource();
      edgePulse0.getCompareCriteria();
      edgePulse0.setNextE((EdgePulse) null);
      edgePulse0.getWeightTime();
      edgePulse0.getSource();
      edgePulse0.getCompareCriteria();
  }

  @Test(timeout = 26000)
  public void test14()  throws Throwable  {
      VertexPulse vertexPulse0 = new VertexPulse((-1670));
      EdgePulse edgePulse0 = vertexPulse0.getReversedEdges();
      EdgePulse edgePulse1 = edgePulse0.findEdgebyTarget(vertexPulse0);
      edgePulse1.getNext();
  }

  @Test(timeout = 26000)
  public void test15()  throws Throwable  {
      VertexPulse vertexPulse0 = new VertexPulse(0);
      VertexPulse vertexPulse1 = vertexPulse0.getBRigthTime();
      EdgePulse edgePulse0 = new EdgePulse(0, 0, vertexPulse1, vertexPulse1, Integer.MAX_VALUE);
      edgePulse0.findEdgebyTarget(vertexPulse0);
  }

  @Test(timeout = 26000)
  public void test16()  throws Throwable  {
      VertexPulse vertexPulse0 = new VertexPulse(0);
      EdgePulse edgePulse0 = vertexPulse0.getReversedEdges();
      EdgePulse edgePulse1 = new EdgePulse(Integer.MAX_VALUE, Integer.MAX_VALUE, vertexPulse0, vertexPulse0, 0);
      edgePulse0.addNextCommonTailEdge(edgePulse1);
      EdgePulse edgePulse2 = edgePulse0.findEdgebyTarget(vertexPulse0);
      edgePulse2.findEdgebyTarget(vertexPulse0);
      edgePulse0.getID();
      edgePulse2.getID();
      edgePulse1.getCompareCriteria();
      edgePulse1.getTarget();
      edgePulse1.getID();
  }

  @Test(timeout = 26000)
  public void test17()  throws Throwable  {
      VertexPulse vertexPulse0 = new VertexPulse(0);
      EdgePulse edgePulse0 = vertexPulse0.getReversedEdges();
      EdgePulse edgePulse1 = new EdgePulse(0, 0, vertexPulse0, vertexPulse0, (-1));
      vertexPulse0.setMinDist((-1));
      vertexPulse0.unlinkRighBoundDist();
      vertexPulse0.maxTime = (-1);
      edgePulse1.getTarget();
      edgePulse1.getTarget();
      edgePulse0.addNextCommonTailEdge(edgePulse1);
      edgePulse0.findEdgebyTarget(vertexPulse0);
      edgePulse1.getWeightDist();
  }

  @Test(timeout = 26000)
  public void test18()  throws Throwable  {
      VertexPulse vertexPulse0 = new VertexPulse(1144);
      assertNotNull(vertexPulse0);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals(1144, vertexPulse0.getID());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getCompareCriteria());
      assertFalse(vertexPulse0.isInsertedTime());
      assertFalse(vertexPulse0.isInserteDist());
      assertEquals(0, vertexPulse0.getMaxTime());
      assertEquals(0, vertexPulse0.getMaxDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinTime());
      
      VertexPulse vertexPulse1 = vertexPulse0.getBRigthDist();
      assertSame(vertexPulse0, vertexPulse1);
      assertSame(vertexPulse1, vertexPulse0);
      assertNotNull(vertexPulse1);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals(1144, vertexPulse0.getID());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getCompareCriteria());
      assertFalse(vertexPulse0.isInsertedTime());
      assertFalse(vertexPulse0.isInserteDist());
      assertEquals(0, vertexPulse0.getMaxTime());
      assertEquals(0, vertexPulse0.getMaxDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinTime());
      assertEquals(1144, vertexPulse1.getID());
      assertEquals(Integer.MAX_VALUE, vertexPulse1.getCompareCriteria());
      assertFalse(vertexPulse1.isInsertedTime());
      assertFalse(vertexPulse1.isInserteDist());
      assertEquals(0, vertexPulse1.getMaxTime());
      assertEquals(0, vertexPulse1.getMaxDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse1.getMinDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse1.getMinTime());
      
      VertexPulse vertexPulse2 = vertexPulse1.getBLeftTime();
      assertSame(vertexPulse0, vertexPulse2);
      assertSame(vertexPulse0, vertexPulse1);
      assertSame(vertexPulse1, vertexPulse2);
      assertSame(vertexPulse1, vertexPulse0);
      assertSame(vertexPulse2, vertexPulse1);
      assertSame(vertexPulse2, vertexPulse0);
      assertNotNull(vertexPulse2);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals(1144, vertexPulse0.getID());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getCompareCriteria());
      assertFalse(vertexPulse0.isInsertedTime());
      assertFalse(vertexPulse0.isInserteDist());
      assertEquals(0, vertexPulse0.getMaxTime());
      assertEquals(0, vertexPulse0.getMaxDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinTime());
      assertEquals(1144, vertexPulse1.getID());
      assertEquals(Integer.MAX_VALUE, vertexPulse1.getCompareCriteria());
      assertFalse(vertexPulse1.isInsertedTime());
      assertFalse(vertexPulse1.isInserteDist());
      assertEquals(0, vertexPulse1.getMaxTime());
      assertEquals(0, vertexPulse1.getMaxDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse1.getMinDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse1.getMinTime());
      assertEquals(1144, vertexPulse2.getID());
      assertEquals(Integer.MAX_VALUE, vertexPulse2.getCompareCriteria());
      assertEquals(Integer.MAX_VALUE, vertexPulse2.getMinDist());
      assertFalse(vertexPulse2.isInsertedTime());
      assertEquals(0, vertexPulse2.getMaxTime());
      assertEquals(Integer.MAX_VALUE, vertexPulse2.getMinTime());
      assertFalse(vertexPulse2.isInserteDist());
      assertEquals(0, vertexPulse2.getMaxDist());
      
      vertexPulse0.fastUnlinkTime();
      assertSame(vertexPulse0, vertexPulse2);
      assertSame(vertexPulse0, vertexPulse1);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals(1144, vertexPulse0.getID());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getCompareCriteria());
      assertFalse(vertexPulse0.isInsertedTime());
      assertFalse(vertexPulse0.isInserteDist());
      assertEquals(0, vertexPulse0.getMaxTime());
      assertEquals(0, vertexPulse0.getMaxDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinTime());
      
      EdgePulse edgePulse0 = new EdgePulse(1144, 1144, vertexPulse2, vertexPulse1, Integer.MAX_VALUE);
      assertNotNull(edgePulse0);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals(1144, vertexPulse0.getID());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getCompareCriteria());
      assertFalse(vertexPulse0.isInsertedTime());
      assertFalse(vertexPulse0.isInserteDist());
      assertEquals(0, vertexPulse0.getMaxTime());
      assertEquals(0, vertexPulse0.getMaxDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinTime());
      assertEquals(1144, vertexPulse1.getID());
      assertEquals(Integer.MAX_VALUE, vertexPulse1.getCompareCriteria());
      assertFalse(vertexPulse1.isInsertedTime());
      assertFalse(vertexPulse1.isInserteDist());
      assertEquals(0, vertexPulse1.getMaxTime());
      assertEquals(0, vertexPulse1.getMaxDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse1.getMinDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse1.getMinTime());
      assertEquals(1144, vertexPulse2.getID());
      assertEquals(Integer.MAX_VALUE, vertexPulse2.getCompareCriteria());
      assertEquals(Integer.MAX_VALUE, vertexPulse2.getMinDist());
      assertFalse(vertexPulse2.isInsertedTime());
      assertEquals(0, vertexPulse2.getMaxTime());
      assertEquals(Integer.MAX_VALUE, vertexPulse2.getMinTime());
      assertFalse(vertexPulse2.isInserteDist());
      assertEquals(0, vertexPulse2.getMaxDist());
      assertEquals(Integer.MAX_VALUE, edgePulse0.getID());
      assertEquals(1144, edgePulse0.getWeightTime());
      assertEquals((-2), edgePulse0.getCompareCriteria());
      assertEquals(1144, edgePulse0.getWeightDist());
      
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(1144));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      vertexPulse1.magicIndex = arrayList0;
      assertEquals(1144, vertexPulse0.getID());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getCompareCriteria());
      assertFalse(vertexPulse0.isInsertedTime());
      assertFalse(vertexPulse0.isInserteDist());
      assertEquals(0, vertexPulse0.getMaxTime());
      assertEquals(0, vertexPulse0.getMaxDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinTime());
      assertEquals(1144, vertexPulse1.getID());
      assertEquals(Integer.MAX_VALUE, vertexPulse1.getCompareCriteria());
      assertFalse(vertexPulse1.isInsertedTime());
      assertFalse(vertexPulse1.isInserteDist());
      assertEquals(0, vertexPulse1.getMaxTime());
      assertEquals(0, vertexPulse1.getMaxDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse1.getMinDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse1.getMinTime());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, vertexPulse1.magicIndex.size());
      assertTrue(vertexPulse1.magicIndex.isEmpty());
      
      boolean boolean0 = vertexPulse0.unLinkVertexDist();
      assertSame(vertexPulse0, vertexPulse2);
      assertSame(vertexPulse0, vertexPulse1);
      assertTrue(boolean0);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals(1144, vertexPulse0.getID());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getCompareCriteria());
      assertFalse(vertexPulse0.isInsertedTime());
      assertFalse(vertexPulse0.isInserteDist());
      assertEquals(0, vertexPulse0.getMaxTime());
      assertEquals(0, vertexPulse0.getMaxDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinTime());
      
      edgePulse0.setNextE((EdgePulse) null);
      assertSame(vertexPulse0, vertexPulse2);
      assertSame(vertexPulse0, vertexPulse1);
      assertSame(vertexPulse1, vertexPulse2);
      assertSame(vertexPulse1, vertexPulse0);
      assertSame(vertexPulse2, vertexPulse1);
      assertSame(vertexPulse2, vertexPulse0);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals(1144, vertexPulse0.getID());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getCompareCriteria());
      assertFalse(vertexPulse0.isInsertedTime());
      assertFalse(vertexPulse0.isInserteDist());
      assertEquals(0, vertexPulse0.getMaxTime());
      assertEquals(0, vertexPulse0.getMaxDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinTime());
      assertEquals(1144, vertexPulse1.getID());
      assertEquals(Integer.MAX_VALUE, vertexPulse1.getCompareCriteria());
      assertFalse(vertexPulse1.isInsertedTime());
      assertFalse(vertexPulse1.isInserteDist());
      assertEquals(0, vertexPulse1.getMaxTime());
      assertEquals(0, vertexPulse1.getMaxDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse1.getMinDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse1.getMinTime());
      assertEquals(1144, vertexPulse2.getID());
      assertEquals(Integer.MAX_VALUE, vertexPulse2.getCompareCriteria());
      assertEquals(Integer.MAX_VALUE, vertexPulse2.getMinDist());
      assertFalse(vertexPulse2.isInsertedTime());
      assertEquals(0, vertexPulse2.getMaxTime());
      assertEquals(Integer.MAX_VALUE, vertexPulse2.getMinTime());
      assertFalse(vertexPulse2.isInserteDist());
      assertEquals(0, vertexPulse2.getMaxDist());
      assertEquals(Integer.MAX_VALUE, edgePulse0.getID());
      assertEquals(1144, edgePulse0.getWeightTime());
      assertEquals((-2), edgePulse0.getCompareCriteria());
      assertEquals(1144, edgePulse0.getWeightDist());
      
      vertexPulse1.insertVertexDist(vertexPulse2);
      assertSame(vertexPulse0, vertexPulse2);
      assertSame(vertexPulse0, vertexPulse1);
      assertSame(vertexPulse1, vertexPulse2);
      assertSame(vertexPulse1, vertexPulse0);
      assertSame(vertexPulse2, vertexPulse1);
      assertSame(vertexPulse2, vertexPulse0);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals(1144, vertexPulse0.getID());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getCompareCriteria());
      assertFalse(vertexPulse0.isInsertedTime());
      assertFalse(vertexPulse0.isInserteDist());
      assertEquals(0, vertexPulse0.getMaxTime());
      assertEquals(0, vertexPulse0.getMaxDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinTime());
      assertEquals(1144, vertexPulse1.getID());
      assertEquals(Integer.MAX_VALUE, vertexPulse1.getCompareCriteria());
      assertFalse(vertexPulse1.isInsertedTime());
      assertFalse(vertexPulse1.isInserteDist());
      assertEquals(0, vertexPulse1.getMaxTime());
      assertEquals(0, vertexPulse1.getMaxDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse1.getMinDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse1.getMinTime());
      assertEquals(1144, vertexPulse2.getID());
      assertEquals(Integer.MAX_VALUE, vertexPulse2.getCompareCriteria());
      assertEquals(Integer.MAX_VALUE, vertexPulse2.getMinDist());
      assertFalse(vertexPulse2.isInsertedTime());
      assertEquals(0, vertexPulse2.getMaxTime());
      assertEquals(Integer.MAX_VALUE, vertexPulse2.getMinTime());
      assertFalse(vertexPulse2.isInserteDist());
      assertEquals(0, vertexPulse2.getMaxDist());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Integer integer0 = new Integer((-631));
      assertNotNull(integer0);
      assertEquals((-631), (int)integer0);
      
      List<Object> list0 = List.of((Object) vertexPulse0, object0, object1, (Object) arrayList0, (Object) integer0);
      assertFalse(object0.equals((Object)object1));
      assertFalse(object1.equals((Object)object0));
      assertSame(vertexPulse0, vertexPulse2);
      assertSame(vertexPulse0, vertexPulse1);
      assertNotSame(object0, object1);
      assertNotSame(object1, object0);
      assertNotNull(list0);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertFalse(arrayList0.contains(1144));
      assertTrue(list0.contains(object1));
      assertFalse(list0.contains(1144));
      assertEquals(1144, vertexPulse0.getID());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getCompareCriteria());
      assertFalse(vertexPulse0.isInsertedTime());
      assertFalse(vertexPulse0.isInserteDist());
      assertEquals(0, vertexPulse0.getMaxTime());
      assertEquals(0, vertexPulse0.getMaxDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinTime());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(5, list0.size());
      assertFalse(list0.isEmpty());
      
      VertexPulse vertexPulse3 = edgePulse0.getSource();
      assertSame(vertexPulse0, vertexPulse3);
      assertSame(vertexPulse0, vertexPulse2);
      assertSame(vertexPulse0, vertexPulse1);
      assertSame(vertexPulse1, vertexPulse3);
      assertSame(vertexPulse1, vertexPulse2);
      assertSame(vertexPulse1, vertexPulse0);
      assertSame(vertexPulse2, vertexPulse3);
      assertSame(vertexPulse2, vertexPulse1);
      assertSame(vertexPulse2, vertexPulse0);
      assertSame(vertexPulse3, vertexPulse2);
      assertSame(vertexPulse3, vertexPulse0);
      assertSame(vertexPulse3, vertexPulse1);
      assertNotNull(vertexPulse3);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals(1144, vertexPulse0.getID());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getCompareCriteria());
      assertFalse(vertexPulse0.isInsertedTime());
      assertFalse(vertexPulse0.isInserteDist());
      assertEquals(0, vertexPulse0.getMaxTime());
      assertEquals(0, vertexPulse0.getMaxDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinTime());
      assertEquals(1144, vertexPulse1.getID());
      assertEquals(Integer.MAX_VALUE, vertexPulse1.getCompareCriteria());
      assertFalse(vertexPulse1.isInsertedTime());
      assertFalse(vertexPulse1.isInserteDist());
      assertEquals(0, vertexPulse1.getMaxTime());
      assertEquals(0, vertexPulse1.getMaxDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse1.getMinDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse1.getMinTime());
      assertEquals(1144, vertexPulse2.getID());
      assertEquals(Integer.MAX_VALUE, vertexPulse2.getCompareCriteria());
      assertEquals(Integer.MAX_VALUE, vertexPulse2.getMinDist());
      assertFalse(vertexPulse2.isInsertedTime());
      assertEquals(0, vertexPulse2.getMaxTime());
      assertEquals(Integer.MAX_VALUE, vertexPulse2.getMinTime());
      assertFalse(vertexPulse2.isInserteDist());
      assertEquals(0, vertexPulse2.getMaxDist());
      assertEquals(Integer.MAX_VALUE, edgePulse0.getID());
      assertEquals(1144, edgePulse0.getWeightTime());
      assertEquals((-2), edgePulse0.getCompareCriteria());
      assertEquals(1144, edgePulse0.getWeightDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse3.getMinDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse3.getMinTime());
      assertFalse(vertexPulse3.isInsertedTime());
      assertFalse(vertexPulse3.isInserteDist());
      assertEquals(1144, vertexPulse3.getID());
      assertEquals(0, vertexPulse3.getMaxTime());
      assertEquals(0, vertexPulse3.getMaxDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse3.getCompareCriteria());
      
      vertexPulse0.setLeftTime(vertexPulse3);
      assertSame(vertexPulse0, vertexPulse3);
      assertSame(vertexPulse0, vertexPulse2);
      assertSame(vertexPulse0, vertexPulse1);
      assertSame(vertexPulse1, vertexPulse3);
      assertSame(vertexPulse1, vertexPulse2);
      assertSame(vertexPulse1, vertexPulse0);
      assertSame(vertexPulse2, vertexPulse3);
      assertSame(vertexPulse2, vertexPulse1);
      assertSame(vertexPulse2, vertexPulse0);
      assertSame(vertexPulse3, vertexPulse2);
      assertSame(vertexPulse3, vertexPulse0);
      assertSame(vertexPulse3, vertexPulse1);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals(1144, vertexPulse0.getID());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getCompareCriteria());
      assertFalse(vertexPulse0.isInsertedTime());
      assertFalse(vertexPulse0.isInserteDist());
      assertEquals(0, vertexPulse0.getMaxTime());
      assertEquals(0, vertexPulse0.getMaxDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinTime());
      assertEquals(1144, vertexPulse1.getID());
      assertEquals(Integer.MAX_VALUE, vertexPulse1.getCompareCriteria());
      assertFalse(vertexPulse1.isInsertedTime());
      assertFalse(vertexPulse1.isInserteDist());
      assertEquals(0, vertexPulse1.getMaxTime());
      assertEquals(0, vertexPulse1.getMaxDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse1.getMinDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse1.getMinTime());
      assertEquals(1144, vertexPulse2.getID());
      assertEquals(Integer.MAX_VALUE, vertexPulse2.getCompareCriteria());
      assertEquals(Integer.MAX_VALUE, vertexPulse2.getMinDist());
      assertFalse(vertexPulse2.isInsertedTime());
      assertEquals(0, vertexPulse2.getMaxTime());
      assertEquals(Integer.MAX_VALUE, vertexPulse2.getMinTime());
      assertFalse(vertexPulse2.isInserteDist());
      assertEquals(0, vertexPulse2.getMaxDist());
      assertEquals(Integer.MAX_VALUE, edgePulse0.getID());
      assertEquals(1144, edgePulse0.getWeightTime());
      assertEquals((-2), edgePulse0.getCompareCriteria());
      assertEquals(1144, edgePulse0.getWeightDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse3.getMinDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse3.getMinTime());
      assertFalse(vertexPulse3.isInsertedTime());
      assertFalse(vertexPulse3.isInserteDist());
      assertEquals(1144, vertexPulse3.getID());
      assertEquals(0, vertexPulse3.getMaxTime());
      assertEquals(0, vertexPulse3.getMaxDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse3.getCompareCriteria());
      
      vertexPulse1.addReversedEdge(edgePulse0);
      assertSame(vertexPulse0, vertexPulse3);
      assertSame(vertexPulse0, vertexPulse2);
      assertSame(vertexPulse0, vertexPulse1);
      assertSame(vertexPulse1, vertexPulse3);
      assertSame(vertexPulse1, vertexPulse2);
      assertSame(vertexPulse1, vertexPulse0);
      assertSame(vertexPulse2, vertexPulse3);
      assertSame(vertexPulse2, vertexPulse1);
      assertSame(vertexPulse2, vertexPulse0);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals(1144, vertexPulse0.getID());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getCompareCriteria());
      assertFalse(vertexPulse0.isInsertedTime());
      assertFalse(vertexPulse0.isInserteDist());
      assertEquals(0, vertexPulse0.getMaxTime());
      assertEquals(0, vertexPulse0.getMaxDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinTime());
      assertEquals(1144, vertexPulse1.getID());
      assertEquals(Integer.MAX_VALUE, vertexPulse1.getCompareCriteria());
      assertFalse(vertexPulse1.isInsertedTime());
      assertFalse(vertexPulse1.isInserteDist());
      assertEquals(0, vertexPulse1.getMaxTime());
      assertEquals(0, vertexPulse1.getMaxDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse1.getMinDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse1.getMinTime());
      assertEquals(1144, vertexPulse2.getID());
      assertEquals(Integer.MAX_VALUE, vertexPulse2.getCompareCriteria());
      assertEquals(Integer.MAX_VALUE, vertexPulse2.getMinDist());
      assertFalse(vertexPulse2.isInsertedTime());
      assertEquals(0, vertexPulse2.getMaxTime());
      assertEquals(Integer.MAX_VALUE, vertexPulse2.getMinTime());
      assertFalse(vertexPulse2.isInserteDist());
      assertEquals(0, vertexPulse2.getMaxDist());
      assertEquals(Integer.MAX_VALUE, edgePulse0.getID());
      assertEquals(1144, edgePulse0.getWeightTime());
      assertEquals((-2), edgePulse0.getCompareCriteria());
      assertEquals(1144, edgePulse0.getWeightDist());
      
      VertexPulse vertexPulse4 = edgePulse0.getSource();
      assertSame(vertexPulse0, vertexPulse3);
      assertSame(vertexPulse0, vertexPulse4);
      assertSame(vertexPulse0, vertexPulse2);
      assertSame(vertexPulse0, vertexPulse1);
      assertSame(vertexPulse4, vertexPulse1);
      assertSame(vertexPulse4, vertexPulse3);
      assertSame(vertexPulse4, vertexPulse2);
      assertSame(vertexPulse4, vertexPulse0);
      assertSame(vertexPulse1, vertexPulse3);
      assertSame(vertexPulse1, vertexPulse4);
      assertSame(vertexPulse1, vertexPulse2);
      assertSame(vertexPulse1, vertexPulse0);
      assertSame(vertexPulse2, vertexPulse3);
      assertSame(vertexPulse2, vertexPulse1);
      assertSame(vertexPulse2, vertexPulse0);
      assertSame(vertexPulse2, vertexPulse4);
      assertNotNull(vertexPulse4);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals(1144, vertexPulse0.getID());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getCompareCriteria());
      assertFalse(vertexPulse0.isInsertedTime());
      assertFalse(vertexPulse0.isInserteDist());
      assertEquals(0, vertexPulse0.getMaxTime());
      assertEquals(0, vertexPulse0.getMaxDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinTime());
      assertEquals(Integer.MAX_VALUE, vertexPulse4.getMinDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse4.getMinTime());
      assertEquals(Integer.MAX_VALUE, vertexPulse4.getCompareCriteria());
      assertFalse(vertexPulse4.isInserteDist());
      assertFalse(vertexPulse4.isInsertedTime());
      assertEquals(1144, vertexPulse4.getID());
      assertEquals(0, vertexPulse4.getMaxTime());
      assertEquals(0, vertexPulse4.getMaxDist());
      assertEquals(1144, vertexPulse1.getID());
      assertEquals(Integer.MAX_VALUE, vertexPulse1.getCompareCriteria());
      assertFalse(vertexPulse1.isInsertedTime());
      assertFalse(vertexPulse1.isInserteDist());
      assertEquals(0, vertexPulse1.getMaxTime());
      assertEquals(0, vertexPulse1.getMaxDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse1.getMinDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse1.getMinTime());
      assertEquals(1144, vertexPulse2.getID());
      assertEquals(Integer.MAX_VALUE, vertexPulse2.getCompareCriteria());
      assertEquals(Integer.MAX_VALUE, vertexPulse2.getMinDist());
      assertFalse(vertexPulse2.isInsertedTime());
      assertEquals(0, vertexPulse2.getMaxTime());
      assertEquals(Integer.MAX_VALUE, vertexPulse2.getMinTime());
      assertFalse(vertexPulse2.isInserteDist());
      assertEquals(0, vertexPulse2.getMaxDist());
      assertEquals(Integer.MAX_VALUE, edgePulse0.getID());
      assertEquals(1144, edgePulse0.getWeightTime());
      assertEquals((-2), edgePulse0.getCompareCriteria());
      assertEquals(1144, edgePulse0.getWeightDist());
      
      int int0 = edgePulse0.getCompareCriteria();
      assertSame(vertexPulse0, vertexPulse3);
      assertSame(vertexPulse0, vertexPulse4);
      assertSame(vertexPulse0, vertexPulse2);
      assertSame(vertexPulse0, vertexPulse1);
      assertSame(vertexPulse1, vertexPulse3);
      assertSame(vertexPulse1, vertexPulse4);
      assertSame(vertexPulse1, vertexPulse2);
      assertSame(vertexPulse1, vertexPulse0);
      assertSame(vertexPulse2, vertexPulse3);
      assertSame(vertexPulse2, vertexPulse1);
      assertSame(vertexPulse2, vertexPulse0);
      assertSame(vertexPulse2, vertexPulse4);
      assertEquals((-2), int0);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals(1144, vertexPulse0.getID());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getCompareCriteria());
      assertFalse(vertexPulse0.isInsertedTime());
      assertFalse(vertexPulse0.isInserteDist());
      assertEquals(0, vertexPulse0.getMaxTime());
      assertEquals(0, vertexPulse0.getMaxDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinTime());
      assertEquals(1144, vertexPulse1.getID());
      assertEquals(Integer.MAX_VALUE, vertexPulse1.getCompareCriteria());
      assertFalse(vertexPulse1.isInsertedTime());
      assertFalse(vertexPulse1.isInserteDist());
      assertEquals(0, vertexPulse1.getMaxTime());
      assertEquals(0, vertexPulse1.getMaxDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse1.getMinDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse1.getMinTime());
      assertEquals(1144, vertexPulse2.getID());
      assertEquals(Integer.MAX_VALUE, vertexPulse2.getCompareCriteria());
      assertEquals(Integer.MAX_VALUE, vertexPulse2.getMinDist());
      assertFalse(vertexPulse2.isInsertedTime());
      assertEquals(0, vertexPulse2.getMaxTime());
      assertEquals(Integer.MAX_VALUE, vertexPulse2.getMinTime());
      assertFalse(vertexPulse2.isInserteDist());
      assertEquals(0, vertexPulse2.getMaxDist());
      assertEquals(Integer.MAX_VALUE, edgePulse0.getID());
      assertEquals(1144, edgePulse0.getWeightTime());
      assertEquals((-2), edgePulse0.getCompareCriteria());
      assertEquals(1144, edgePulse0.getWeightDist());
      
      edgePulse0.setNextE((EdgePulse) null);
      assertSame(vertexPulse0, vertexPulse3);
      assertSame(vertexPulse0, vertexPulse4);
      assertSame(vertexPulse0, vertexPulse2);
      assertSame(vertexPulse0, vertexPulse1);
      assertSame(vertexPulse1, vertexPulse3);
      assertSame(vertexPulse1, vertexPulse4);
      assertSame(vertexPulse1, vertexPulse2);
      assertSame(vertexPulse1, vertexPulse0);
      assertSame(vertexPulse2, vertexPulse3);
      assertSame(vertexPulse2, vertexPulse1);
      assertSame(vertexPulse2, vertexPulse0);
      assertSame(vertexPulse2, vertexPulse4);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals(1144, vertexPulse0.getID());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getCompareCriteria());
      assertFalse(vertexPulse0.isInsertedTime());
      assertFalse(vertexPulse0.isInserteDist());
      assertEquals(0, vertexPulse0.getMaxTime());
      assertEquals(0, vertexPulse0.getMaxDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinTime());
      assertEquals(1144, vertexPulse1.getID());
      assertEquals(Integer.MAX_VALUE, vertexPulse1.getCompareCriteria());
      assertFalse(vertexPulse1.isInsertedTime());
      assertFalse(vertexPulse1.isInserteDist());
      assertEquals(0, vertexPulse1.getMaxTime());
      assertEquals(0, vertexPulse1.getMaxDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse1.getMinDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse1.getMinTime());
      assertEquals(1144, vertexPulse2.getID());
      assertEquals(Integer.MAX_VALUE, vertexPulse2.getCompareCriteria());
      assertEquals(Integer.MAX_VALUE, vertexPulse2.getMinDist());
      assertFalse(vertexPulse2.isInsertedTime());
      assertEquals(0, vertexPulse2.getMaxTime());
      assertEquals(Integer.MAX_VALUE, vertexPulse2.getMinTime());
      assertFalse(vertexPulse2.isInserteDist());
      assertEquals(0, vertexPulse2.getMaxDist());
      assertEquals(Integer.MAX_VALUE, edgePulse0.getID());
      assertEquals(1144, edgePulse0.getWeightTime());
      assertEquals((-2), edgePulse0.getCompareCriteria());
      assertEquals(1144, edgePulse0.getWeightDist());
      
      int int1 = edgePulse0.getWeightTime();
      assertFalse(int1 == int0);
      assertSame(vertexPulse0, vertexPulse3);
      assertSame(vertexPulse0, vertexPulse4);
      assertSame(vertexPulse0, vertexPulse2);
      assertSame(vertexPulse0, vertexPulse1);
      assertSame(vertexPulse1, vertexPulse3);
      assertSame(vertexPulse1, vertexPulse4);
      assertSame(vertexPulse1, vertexPulse2);
      assertSame(vertexPulse1, vertexPulse0);
      assertSame(vertexPulse2, vertexPulse3);
      assertSame(vertexPulse2, vertexPulse1);
      assertSame(vertexPulse2, vertexPulse0);
      assertSame(vertexPulse2, vertexPulse4);
      assertEquals(1144, int1);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals(1144, vertexPulse0.getID());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getCompareCriteria());
      assertFalse(vertexPulse0.isInsertedTime());
      assertFalse(vertexPulse0.isInserteDist());
      assertEquals(0, vertexPulse0.getMaxTime());
      assertEquals(0, vertexPulse0.getMaxDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinTime());
      assertEquals(1144, vertexPulse1.getID());
      assertEquals(Integer.MAX_VALUE, vertexPulse1.getCompareCriteria());
      assertFalse(vertexPulse1.isInsertedTime());
      assertFalse(vertexPulse1.isInserteDist());
      assertEquals(0, vertexPulse1.getMaxTime());
      assertEquals(0, vertexPulse1.getMaxDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse1.getMinDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse1.getMinTime());
      assertEquals(1144, vertexPulse2.getID());
      assertEquals(Integer.MAX_VALUE, vertexPulse2.getCompareCriteria());
      assertEquals(Integer.MAX_VALUE, vertexPulse2.getMinDist());
      assertFalse(vertexPulse2.isInsertedTime());
      assertEquals(0, vertexPulse2.getMaxTime());
      assertEquals(Integer.MAX_VALUE, vertexPulse2.getMinTime());
      assertFalse(vertexPulse2.isInserteDist());
      assertEquals(0, vertexPulse2.getMaxDist());
      assertEquals(Integer.MAX_VALUE, edgePulse0.getID());
      assertEquals(1144, edgePulse0.getWeightTime());
      assertEquals((-2), edgePulse0.getCompareCriteria());
      assertEquals(1144, edgePulse0.getWeightDist());
      
      VertexPulse vertexPulse5 = edgePulse0.getSource();
      assertSame(vertexPulse0, vertexPulse5);
      assertSame(vertexPulse0, vertexPulse3);
      assertSame(vertexPulse0, vertexPulse4);
      assertSame(vertexPulse0, vertexPulse2);
      assertSame(vertexPulse0, vertexPulse1);
      assertSame(vertexPulse1, vertexPulse5);
      assertSame(vertexPulse1, vertexPulse3);
      assertSame(vertexPulse1, vertexPulse4);
      assertSame(vertexPulse1, vertexPulse2);
      assertSame(vertexPulse1, vertexPulse0);
      assertSame(vertexPulse2, vertexPulse3);
      assertSame(vertexPulse2, vertexPulse1);
      assertSame(vertexPulse2, vertexPulse5);
      assertSame(vertexPulse2, vertexPulse0);
      assertSame(vertexPulse2, vertexPulse4);
      assertSame(vertexPulse5, vertexPulse3);
      assertSame(vertexPulse5, vertexPulse1);
      assertSame(vertexPulse5, vertexPulse4);
      assertSame(vertexPulse5, vertexPulse0);
      assertSame(vertexPulse5, vertexPulse2);
      assertNotNull(vertexPulse5);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals(1144, vertexPulse0.getID());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getCompareCriteria());
      assertFalse(vertexPulse0.isInsertedTime());
      assertFalse(vertexPulse0.isInserteDist());
      assertEquals(0, vertexPulse0.getMaxTime());
      assertEquals(0, vertexPulse0.getMaxDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinTime());
      assertEquals(1144, vertexPulse1.getID());
      assertEquals(Integer.MAX_VALUE, vertexPulse1.getCompareCriteria());
      assertFalse(vertexPulse1.isInsertedTime());
      assertFalse(vertexPulse1.isInserteDist());
      assertEquals(0, vertexPulse1.getMaxTime());
      assertEquals(0, vertexPulse1.getMaxDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse1.getMinDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse1.getMinTime());
      assertEquals(1144, vertexPulse2.getID());
      assertEquals(Integer.MAX_VALUE, vertexPulse2.getCompareCriteria());
      assertEquals(Integer.MAX_VALUE, vertexPulse2.getMinDist());
      assertFalse(vertexPulse2.isInsertedTime());
      assertEquals(0, vertexPulse2.getMaxTime());
      assertEquals(Integer.MAX_VALUE, vertexPulse2.getMinTime());
      assertFalse(vertexPulse2.isInserteDist());
      assertEquals(0, vertexPulse2.getMaxDist());
      assertEquals(Integer.MAX_VALUE, edgePulse0.getID());
      assertEquals(1144, edgePulse0.getWeightTime());
      assertEquals((-2), edgePulse0.getCompareCriteria());
      assertEquals(1144, edgePulse0.getWeightDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse5.getMinTime());
      assertEquals(Integer.MAX_VALUE, vertexPulse5.getMinDist());
      assertFalse(vertexPulse5.isInsertedTime());
      assertEquals(Integer.MAX_VALUE, vertexPulse5.getCompareCriteria());
      assertEquals(1144, vertexPulse5.getID());
      assertFalse(vertexPulse5.isInserteDist());
      assertEquals(0, vertexPulse5.getMaxTime());
      assertEquals(0, vertexPulse5.getMaxDist());
      
      int int2 = edgePulse0.getCompareCriteria();
      assertFalse(int2 == int1);
      assertSame(vertexPulse0, vertexPulse5);
      assertSame(vertexPulse0, vertexPulse3);
      assertSame(vertexPulse0, vertexPulse4);
      assertSame(vertexPulse0, vertexPulse2);
      assertSame(vertexPulse0, vertexPulse1);
      assertSame(vertexPulse1, vertexPulse5);
      assertSame(vertexPulse1, vertexPulse3);
      assertSame(vertexPulse1, vertexPulse4);
      assertSame(vertexPulse1, vertexPulse2);
      assertSame(vertexPulse1, vertexPulse0);
      assertSame(vertexPulse2, vertexPulse3);
      assertSame(vertexPulse2, vertexPulse1);
      assertSame(vertexPulse2, vertexPulse5);
      assertSame(vertexPulse2, vertexPulse0);
      assertSame(vertexPulse2, vertexPulse4);
      assertEquals((-2), int2);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals(1144, vertexPulse0.getID());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getCompareCriteria());
      assertFalse(vertexPulse0.isInsertedTime());
      assertFalse(vertexPulse0.isInserteDist());
      assertEquals(0, vertexPulse0.getMaxTime());
      assertEquals(0, vertexPulse0.getMaxDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinTime());
      assertEquals(1144, vertexPulse1.getID());
      assertEquals(Integer.MAX_VALUE, vertexPulse1.getCompareCriteria());
      assertFalse(vertexPulse1.isInsertedTime());
      assertFalse(vertexPulse1.isInserteDist());
      assertEquals(0, vertexPulse1.getMaxTime());
      assertEquals(0, vertexPulse1.getMaxDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse1.getMinDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse1.getMinTime());
      assertEquals(1144, vertexPulse2.getID());
      assertEquals(Integer.MAX_VALUE, vertexPulse2.getCompareCriteria());
      assertEquals(Integer.MAX_VALUE, vertexPulse2.getMinDist());
      assertFalse(vertexPulse2.isInsertedTime());
      assertEquals(0, vertexPulse2.getMaxTime());
      assertEquals(Integer.MAX_VALUE, vertexPulse2.getMinTime());
      assertFalse(vertexPulse2.isInserteDist());
      assertEquals(0, vertexPulse2.getMaxDist());
      assertEquals(Integer.MAX_VALUE, edgePulse0.getID());
      assertEquals(1144, edgePulse0.getWeightTime());
      assertEquals((-2), edgePulse0.getCompareCriteria());
      assertEquals(1144, edgePulse0.getWeightDist());
      
      edgePulse0.findEdgebyTarget(vertexPulse1);
  }

  @Test(timeout = 26000)
  public void test19()  throws Throwable  {
      VertexPulse vertexPulse0 = new VertexPulse((-3272));
      VertexPulse vertexPulse1 = vertexPulse0.getBLeftTime();
      vertexPulse1.maxTime = (-3272);
      ArrayList<Integer> arrayList0 = vertexPulse0.magicIndex;
      arrayList0.add(0, (Integer) null);
      vertexPulse1.QS(arrayList0, 0, 0);
      VertexPulse vertexPulse2 = vertexPulse1.getBRigthTime();
      EdgePulse edgePulse0 = new EdgePulse(0, (-3272), vertexPulse2, vertexPulse1, (-3272));
      EdgePulse edgePulse1 = vertexPulse0.getReversedEdges();
      edgePulse1.addNextCommonTailEdge(edgePulse0);
      edgePulse0.setNextE(edgePulse1);
      vertexPulse0.getReversedEdges();
      edgePulse1.getNext();
  }

  @Test(timeout = 26000)
  public void test20()  throws Throwable  {
      VertexPulse vertexPulse0 = new VertexPulse((-3272));
      VertexPulse vertexPulse1 = vertexPulse0.getBLeftTime();
      ArrayList<Integer> arrayList0 = vertexPulse0.magicIndex;
      arrayList0.add(0, (Integer) Integer.MAX_VALUE);
      vertexPulse1.QS(arrayList0, 0, 0);
      VertexPulse vertexPulse2 = vertexPulse1.getBRigthTime();
      EdgePulse edgePulse0 = new EdgePulse(0, (-3272), vertexPulse2, vertexPulse1, (-3272));
      EdgePulse edgePulse1 = vertexPulse0.getReversedEdges();
      edgePulse1.addNextCommonTailEdge(edgePulse0);
      edgePulse0.setNextE(edgePulse1);
      edgePulse0.getNext();
      edgePulse0.getWeightTime();
      edgePulse1.getWeightTime();
  }

  @Test(timeout = 26000)
  public void test21()  throws Throwable  {
      VertexPulse vertexPulse0 = new VertexPulse((-1317));
      assertNotNull(vertexPulse0);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinDist());
      assertEquals((-1317), vertexPulse0.getID());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinTime());
      assertEquals(0, vertexPulse0.getMaxTime());
      assertFalse(vertexPulse0.isInserteDist());
      assertEquals(0, vertexPulse0.getMaxDist());
      assertFalse(vertexPulse0.isInsertedTime());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getCompareCriteria());
      
      VertexPulse vertexPulse1 = vertexPulse0.getBRigthDist();
      assertSame(vertexPulse0, vertexPulse1);
      assertSame(vertexPulse1, vertexPulse0);
      assertNotNull(vertexPulse1);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinDist());
      assertEquals((-1317), vertexPulse0.getID());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinTime());
      assertEquals(0, vertexPulse0.getMaxTime());
      assertFalse(vertexPulse0.isInserteDist());
      assertEquals(0, vertexPulse0.getMaxDist());
      assertFalse(vertexPulse0.isInsertedTime());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getCompareCriteria());
      assertFalse(vertexPulse1.isInsertedTime());
      assertEquals(Integer.MAX_VALUE, vertexPulse1.getMinDist());
      assertEquals(0, vertexPulse1.getMaxTime());
      assertEquals(0, vertexPulse1.getMaxDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse1.getMinTime());
      assertFalse(vertexPulse1.isInserteDist());
      assertEquals((-1317), vertexPulse1.getID());
      assertEquals(Integer.MAX_VALUE, vertexPulse1.getCompareCriteria());
      
      VertexPulse vertexPulse2 = vertexPulse1.getBLeftTime();
      assertSame(vertexPulse0, vertexPulse1);
      assertSame(vertexPulse0, vertexPulse2);
      assertSame(vertexPulse1, vertexPulse2);
      assertSame(vertexPulse1, vertexPulse0);
      assertSame(vertexPulse2, vertexPulse1);
      assertSame(vertexPulse2, vertexPulse0);
      assertNotNull(vertexPulse2);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinDist());
      assertEquals((-1317), vertexPulse0.getID());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinTime());
      assertEquals(0, vertexPulse0.getMaxTime());
      assertFalse(vertexPulse0.isInserteDist());
      assertEquals(0, vertexPulse0.getMaxDist());
      assertFalse(vertexPulse0.isInsertedTime());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getCompareCriteria());
      assertFalse(vertexPulse1.isInsertedTime());
      assertEquals(Integer.MAX_VALUE, vertexPulse1.getMinDist());
      assertEquals(0, vertexPulse1.getMaxTime());
      assertEquals(0, vertexPulse1.getMaxDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse1.getMinTime());
      assertFalse(vertexPulse1.isInserteDist());
      assertEquals((-1317), vertexPulse1.getID());
      assertEquals(Integer.MAX_VALUE, vertexPulse1.getCompareCriteria());
      assertEquals((-1317), vertexPulse2.getID());
      assertEquals(Integer.MAX_VALUE, vertexPulse2.getCompareCriteria());
      assertEquals(Integer.MAX_VALUE, vertexPulse2.getMinTime());
      assertEquals(Integer.MAX_VALUE, vertexPulse2.getMinDist());
      assertFalse(vertexPulse2.isInsertedTime());
      assertFalse(vertexPulse2.isInserteDist());
      assertEquals(0, vertexPulse2.getMaxDist());
      assertEquals(0, vertexPulse2.getMaxTime());
      
      boolean boolean0 = vertexPulse1.unLinkVertexDist();
      assertSame(vertexPulse0, vertexPulse1);
      assertSame(vertexPulse0, vertexPulse2);
      assertSame(vertexPulse1, vertexPulse2);
      assertSame(vertexPulse1, vertexPulse0);
      assertTrue(boolean0);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinDist());
      assertEquals((-1317), vertexPulse0.getID());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinTime());
      assertEquals(0, vertexPulse0.getMaxTime());
      assertFalse(vertexPulse0.isInserteDist());
      assertEquals(0, vertexPulse0.getMaxDist());
      assertFalse(vertexPulse0.isInsertedTime());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getCompareCriteria());
      assertFalse(vertexPulse1.isInsertedTime());
      assertEquals(Integer.MAX_VALUE, vertexPulse1.getMinDist());
      assertEquals(0, vertexPulse1.getMaxTime());
      assertEquals(0, vertexPulse1.getMaxDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse1.getMinTime());
      assertFalse(vertexPulse1.isInserteDist());
      assertEquals((-1317), vertexPulse1.getID());
      assertEquals(Integer.MAX_VALUE, vertexPulse1.getCompareCriteria());
      
      vertexPulse0.firstTime = true;
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinDist());
      assertEquals((-1317), vertexPulse0.getID());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinTime());
      assertEquals(0, vertexPulse0.getMaxTime());
      assertFalse(vertexPulse0.isInserteDist());
      assertEquals(0, vertexPulse0.getMaxDist());
      assertFalse(vertexPulse0.isInsertedTime());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getCompareCriteria());
      
      VertexPulse vertexPulse3 = vertexPulse2.getBRigthTime();
      assertSame(vertexPulse0, vertexPulse3);
      assertSame(vertexPulse0, vertexPulse1);
      assertSame(vertexPulse0, vertexPulse2);
      assertSame(vertexPulse1, vertexPulse2);
      assertSame(vertexPulse1, vertexPulse0);
      assertSame(vertexPulse1, vertexPulse3);
      assertSame(vertexPulse2, vertexPulse1);
      assertSame(vertexPulse2, vertexPulse3);
      assertSame(vertexPulse2, vertexPulse0);
      assertSame(vertexPulse3, vertexPulse0);
      assertSame(vertexPulse3, vertexPulse2);
      assertSame(vertexPulse3, vertexPulse1);
      assertNotNull(vertexPulse3);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinDist());
      assertEquals((-1317), vertexPulse0.getID());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinTime());
      assertEquals(0, vertexPulse0.getMaxTime());
      assertFalse(vertexPulse0.isInserteDist());
      assertEquals(0, vertexPulse0.getMaxDist());
      assertFalse(vertexPulse0.isInsertedTime());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getCompareCriteria());
      assertFalse(vertexPulse1.isInsertedTime());
      assertEquals(Integer.MAX_VALUE, vertexPulse1.getMinDist());
      assertEquals(0, vertexPulse1.getMaxTime());
      assertEquals(0, vertexPulse1.getMaxDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse1.getMinTime());
      assertFalse(vertexPulse1.isInserteDist());
      assertEquals((-1317), vertexPulse1.getID());
      assertEquals(Integer.MAX_VALUE, vertexPulse1.getCompareCriteria());
      assertEquals((-1317), vertexPulse2.getID());
      assertEquals(Integer.MAX_VALUE, vertexPulse2.getCompareCriteria());
      assertEquals(Integer.MAX_VALUE, vertexPulse2.getMinTime());
      assertEquals(Integer.MAX_VALUE, vertexPulse2.getMinDist());
      assertFalse(vertexPulse2.isInsertedTime());
      assertFalse(vertexPulse2.isInserteDist());
      assertEquals(0, vertexPulse2.getMaxDist());
      assertEquals(0, vertexPulse2.getMaxTime());
      assertEquals(Integer.MAX_VALUE, vertexPulse3.getMinDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse3.getMinTime());
      assertFalse(vertexPulse3.isInsertedTime());
      assertEquals(0, vertexPulse3.getMaxDist());
      assertEquals(0, vertexPulse3.getMaxTime());
      assertEquals((-1317), vertexPulse3.getID());
      assertFalse(vertexPulse3.isInserteDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse3.getCompareCriteria());
      
      vertexPulse3.LabelDist3 = (double) 1;
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinDist());
      assertEquals((-1317), vertexPulse0.getID());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinTime());
      assertEquals(0, vertexPulse0.getMaxTime());
      assertFalse(vertexPulse0.isInserteDist());
      assertEquals(0, vertexPulse0.getMaxDist());
      assertFalse(vertexPulse0.isInsertedTime());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getCompareCriteria());
      assertFalse(vertexPulse1.isInsertedTime());
      assertEquals(Integer.MAX_VALUE, vertexPulse1.getMinDist());
      assertEquals(0, vertexPulse1.getMaxTime());
      assertEquals(0, vertexPulse1.getMaxDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse1.getMinTime());
      assertFalse(vertexPulse1.isInserteDist());
      assertEquals((-1317), vertexPulse1.getID());
      assertEquals(Integer.MAX_VALUE, vertexPulse1.getCompareCriteria());
      assertEquals((-1317), vertexPulse2.getID());
      assertEquals(Integer.MAX_VALUE, vertexPulse2.getCompareCriteria());
      assertEquals(Integer.MAX_VALUE, vertexPulse2.getMinTime());
      assertEquals(Integer.MAX_VALUE, vertexPulse2.getMinDist());
      assertFalse(vertexPulse2.isInsertedTime());
      assertFalse(vertexPulse2.isInserteDist());
      assertEquals(0, vertexPulse2.getMaxDist());
      assertEquals(0, vertexPulse2.getMaxTime());
      assertEquals(Integer.MAX_VALUE, vertexPulse3.getMinDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse3.getMinTime());
      assertFalse(vertexPulse3.isInsertedTime());
      assertEquals(0, vertexPulse3.getMaxDist());
      assertEquals(0, vertexPulse3.getMaxTime());
      assertEquals((-1317), vertexPulse3.getID());
      assertFalse(vertexPulse3.isInserteDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse3.getCompareCriteria());
      
      EdgePulse edgePulse0 = new EdgePulse(1, (-1078), vertexPulse3, vertexPulse2, Integer.MAX_VALUE);
      assertNotNull(edgePulse0);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinDist());
      assertEquals((-1317), vertexPulse0.getID());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinTime());
      assertEquals(0, vertexPulse0.getMaxTime());
      assertFalse(vertexPulse0.isInserteDist());
      assertEquals(0, vertexPulse0.getMaxDist());
      assertFalse(vertexPulse0.isInsertedTime());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getCompareCriteria());
      assertFalse(vertexPulse1.isInsertedTime());
      assertEquals(Integer.MAX_VALUE, vertexPulse1.getMinDist());
      assertEquals(0, vertexPulse1.getMaxTime());
      assertEquals(0, vertexPulse1.getMaxDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse1.getMinTime());
      assertFalse(vertexPulse1.isInserteDist());
      assertEquals((-1317), vertexPulse1.getID());
      assertEquals(Integer.MAX_VALUE, vertexPulse1.getCompareCriteria());
      assertEquals((-1317), vertexPulse2.getID());
      assertEquals(Integer.MAX_VALUE, vertexPulse2.getCompareCriteria());
      assertEquals(Integer.MAX_VALUE, vertexPulse2.getMinTime());
      assertEquals(Integer.MAX_VALUE, vertexPulse2.getMinDist());
      assertFalse(vertexPulse2.isInsertedTime());
      assertFalse(vertexPulse2.isInserteDist());
      assertEquals(0, vertexPulse2.getMaxDist());
      assertEquals(0, vertexPulse2.getMaxTime());
      assertEquals(Integer.MAX_VALUE, vertexPulse3.getMinDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse3.getMinTime());
      assertFalse(vertexPulse3.isInsertedTime());
      assertEquals(0, vertexPulse3.getMaxDist());
      assertEquals(0, vertexPulse3.getMaxTime());
      assertEquals((-1317), vertexPulse3.getID());
      assertFalse(vertexPulse3.isInserteDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse3.getCompareCriteria());
      assertEquals(1, edgePulse0.getWeightDist());
      assertEquals((-1078), edgePulse0.getWeightTime());
      assertEquals(Integer.MAX_VALUE, edgePulse0.getID());
      assertEquals((-2), edgePulse0.getCompareCriteria());
      
      vertexPulse2.LabelTime2 = 1473.85279990426;
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinDist());
      assertEquals((-1317), vertexPulse0.getID());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinTime());
      assertEquals(0, vertexPulse0.getMaxTime());
      assertFalse(vertexPulse0.isInserteDist());
      assertEquals(0, vertexPulse0.getMaxDist());
      assertFalse(vertexPulse0.isInsertedTime());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getCompareCriteria());
      assertFalse(vertexPulse1.isInsertedTime());
      assertEquals(Integer.MAX_VALUE, vertexPulse1.getMinDist());
      assertEquals(0, vertexPulse1.getMaxTime());
      assertEquals(0, vertexPulse1.getMaxDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse1.getMinTime());
      assertFalse(vertexPulse1.isInserteDist());
      assertEquals((-1317), vertexPulse1.getID());
      assertEquals(Integer.MAX_VALUE, vertexPulse1.getCompareCriteria());
      assertEquals((-1317), vertexPulse2.getID());
      assertEquals(Integer.MAX_VALUE, vertexPulse2.getCompareCriteria());
      assertEquals(Integer.MAX_VALUE, vertexPulse2.getMinTime());
      assertEquals(Integer.MAX_VALUE, vertexPulse2.getMinDist());
      assertFalse(vertexPulse2.isInsertedTime());
      assertFalse(vertexPulse2.isInserteDist());
      assertEquals(0, vertexPulse2.getMaxDist());
      assertEquals(0, vertexPulse2.getMaxTime());
      
      VertexPulse vertexPulse4 = vertexPulse3.getBRigthDist();
      assertSame(vertexPulse0, vertexPulse3);
      assertSame(vertexPulse0, vertexPulse1);
      assertSame(vertexPulse0, vertexPulse2);
      assertSame(vertexPulse0, vertexPulse4);
      assertSame(vertexPulse1, vertexPulse2);
      assertSame(vertexPulse1, vertexPulse0);
      assertSame(vertexPulse1, vertexPulse3);
      assertSame(vertexPulse1, vertexPulse4);
      assertSame(vertexPulse2, vertexPulse1);
      assertSame(vertexPulse2, vertexPulse3);
      assertSame(vertexPulse2, vertexPulse4);
      assertSame(vertexPulse2, vertexPulse0);
      assertSame(vertexPulse3, vertexPulse4);
      assertSame(vertexPulse3, vertexPulse0);
      assertSame(vertexPulse3, vertexPulse2);
      assertSame(vertexPulse3, vertexPulse1);
      assertSame(vertexPulse4, vertexPulse2);
      assertSame(vertexPulse4, vertexPulse0);
      assertSame(vertexPulse4, vertexPulse1);
      assertSame(vertexPulse4, vertexPulse3);
      assertNotNull(vertexPulse4);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinDist());
      assertEquals((-1317), vertexPulse0.getID());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinTime());
      assertEquals(0, vertexPulse0.getMaxTime());
      assertFalse(vertexPulse0.isInserteDist());
      assertEquals(0, vertexPulse0.getMaxDist());
      assertFalse(vertexPulse0.isInsertedTime());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getCompareCriteria());
      assertFalse(vertexPulse1.isInsertedTime());
      assertEquals(Integer.MAX_VALUE, vertexPulse1.getMinDist());
      assertEquals(0, vertexPulse1.getMaxTime());
      assertEquals(0, vertexPulse1.getMaxDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse1.getMinTime());
      assertFalse(vertexPulse1.isInserteDist());
      assertEquals((-1317), vertexPulse1.getID());
      assertEquals(Integer.MAX_VALUE, vertexPulse1.getCompareCriteria());
      assertEquals((-1317), vertexPulse2.getID());
      assertEquals(Integer.MAX_VALUE, vertexPulse2.getCompareCriteria());
      assertEquals(Integer.MAX_VALUE, vertexPulse2.getMinTime());
      assertEquals(Integer.MAX_VALUE, vertexPulse2.getMinDist());
      assertFalse(vertexPulse2.isInsertedTime());
      assertFalse(vertexPulse2.isInserteDist());
      assertEquals(0, vertexPulse2.getMaxDist());
      assertEquals(0, vertexPulse2.getMaxTime());
      assertEquals(Integer.MAX_VALUE, vertexPulse3.getMinDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse3.getMinTime());
      assertFalse(vertexPulse3.isInsertedTime());
      assertEquals(0, vertexPulse3.getMaxDist());
      assertEquals(0, vertexPulse3.getMaxTime());
      assertEquals((-1317), vertexPulse3.getID());
      assertFalse(vertexPulse3.isInserteDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse3.getCompareCriteria());
      assertEquals(Integer.MAX_VALUE, vertexPulse4.getMinDist());
      assertFalse(vertexPulse4.isInsertedTime());
      assertEquals(Integer.MAX_VALUE, vertexPulse4.getMinTime());
      assertFalse(vertexPulse4.isInserteDist());
      assertEquals(0, vertexPulse4.getMaxDist());
      assertEquals(0, vertexPulse4.getMaxTime());
      assertEquals((-1317), vertexPulse4.getID());
      assertEquals(Integer.MAX_VALUE, vertexPulse4.getCompareCriteria());
      
      EdgePulse edgePulse1 = new EdgePulse((-1), Integer.MAX_VALUE, vertexPulse4, vertexPulse3, 787);
      assertFalse(edgePulse1.equals((Object)edgePulse0));
      assertNotNull(edgePulse1);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinDist());
      assertEquals((-1317), vertexPulse0.getID());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinTime());
      assertEquals(0, vertexPulse0.getMaxTime());
      assertFalse(vertexPulse0.isInserteDist());
      assertEquals(0, vertexPulse0.getMaxDist());
      assertFalse(vertexPulse0.isInsertedTime());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getCompareCriteria());
      assertFalse(vertexPulse1.isInsertedTime());
      assertEquals(Integer.MAX_VALUE, vertexPulse1.getMinDist());
      assertEquals(0, vertexPulse1.getMaxTime());
      assertEquals(0, vertexPulse1.getMaxDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse1.getMinTime());
      assertFalse(vertexPulse1.isInserteDist());
      assertEquals((-1317), vertexPulse1.getID());
      assertEquals(Integer.MAX_VALUE, vertexPulse1.getCompareCriteria());
      assertEquals((-1317), vertexPulse2.getID());
      assertEquals(Integer.MAX_VALUE, vertexPulse2.getCompareCriteria());
      assertEquals(Integer.MAX_VALUE, vertexPulse2.getMinTime());
      assertEquals(Integer.MAX_VALUE, vertexPulse2.getMinDist());
      assertFalse(vertexPulse2.isInsertedTime());
      assertFalse(vertexPulse2.isInserteDist());
      assertEquals(0, vertexPulse2.getMaxDist());
      assertEquals(0, vertexPulse2.getMaxTime());
      assertEquals(Integer.MAX_VALUE, vertexPulse3.getMinDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse3.getMinTime());
      assertFalse(vertexPulse3.isInsertedTime());
      assertEquals(0, vertexPulse3.getMaxDist());
      assertEquals(0, vertexPulse3.getMaxTime());
      assertEquals((-1317), vertexPulse3.getID());
      assertFalse(vertexPulse3.isInserteDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse3.getCompareCriteria());
      assertEquals(Integer.MAX_VALUE, vertexPulse4.getMinDist());
      assertFalse(vertexPulse4.isInsertedTime());
      assertEquals(Integer.MAX_VALUE, vertexPulse4.getMinTime());
      assertFalse(vertexPulse4.isInserteDist());
      assertEquals(0, vertexPulse4.getMaxDist());
      assertEquals(0, vertexPulse4.getMaxTime());
      assertEquals((-1317), vertexPulse4.getID());
      assertEquals(Integer.MAX_VALUE, vertexPulse4.getCompareCriteria());
      assertEquals(787, edgePulse1.getID());
      assertEquals(Integer.MAX_VALUE, edgePulse1.getWeightTime());
      assertEquals((-1), edgePulse1.getWeightDist());
      assertEquals((-2), edgePulse1.getCompareCriteria());
      
      vertexPulse1.setMaxDist((-469));
      assertSame(vertexPulse0, vertexPulse3);
      assertSame(vertexPulse0, vertexPulse1);
      assertSame(vertexPulse0, vertexPulse2);
      assertSame(vertexPulse0, vertexPulse4);
      assertSame(vertexPulse1, vertexPulse2);
      assertSame(vertexPulse1, vertexPulse0);
      assertSame(vertexPulse1, vertexPulse3);
      assertSame(vertexPulse1, vertexPulse4);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinDist());
      assertEquals((-1317), vertexPulse0.getID());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinTime());
      assertEquals(0, vertexPulse0.getMaxTime());
      assertFalse(vertexPulse0.isInserteDist());
      assertFalse(vertexPulse0.isInsertedTime());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getCompareCriteria());
      assertEquals((-469), vertexPulse0.getMaxDist());
      assertFalse(vertexPulse1.isInsertedTime());
      assertEquals(Integer.MAX_VALUE, vertexPulse1.getMinDist());
      assertEquals(0, vertexPulse1.getMaxTime());
      assertEquals(Integer.MAX_VALUE, vertexPulse1.getMinTime());
      assertFalse(vertexPulse1.isInserteDist());
      assertEquals((-469), vertexPulse1.getMaxDist());
      assertEquals((-1317), vertexPulse1.getID());
      assertEquals(Integer.MAX_VALUE, vertexPulse1.getCompareCriteria());
      
      edgePulse0.setNextE(edgePulse1);
      assertFalse(edgePulse0.equals((Object)edgePulse1));
      assertFalse(edgePulse1.equals((Object)edgePulse0));
      assertSame(vertexPulse0, vertexPulse3);
      assertSame(vertexPulse0, vertexPulse1);
      assertSame(vertexPulse0, vertexPulse2);
      assertSame(vertexPulse0, vertexPulse4);
      assertSame(vertexPulse1, vertexPulse2);
      assertSame(vertexPulse1, vertexPulse0);
      assertSame(vertexPulse1, vertexPulse3);
      assertSame(vertexPulse1, vertexPulse4);
      assertSame(vertexPulse2, vertexPulse1);
      assertSame(vertexPulse2, vertexPulse3);
      assertSame(vertexPulse2, vertexPulse4);
      assertSame(vertexPulse2, vertexPulse0);
      assertSame(vertexPulse3, vertexPulse4);
      assertSame(vertexPulse3, vertexPulse0);
      assertSame(vertexPulse3, vertexPulse2);
      assertSame(vertexPulse3, vertexPulse1);
      assertNotSame(edgePulse0, edgePulse1);
      assertSame(vertexPulse4, vertexPulse2);
      assertSame(vertexPulse4, vertexPulse0);
      assertSame(vertexPulse4, vertexPulse1);
      assertSame(vertexPulse4, vertexPulse3);
      assertNotSame(edgePulse1, edgePulse0);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinDist());
      assertEquals((-1317), vertexPulse0.getID());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinTime());
      assertEquals(0, vertexPulse0.getMaxTime());
      assertFalse(vertexPulse0.isInserteDist());
      assertFalse(vertexPulse0.isInsertedTime());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getCompareCriteria());
      assertEquals((-469), vertexPulse0.getMaxDist());
      assertFalse(vertexPulse1.isInsertedTime());
      assertEquals(Integer.MAX_VALUE, vertexPulse1.getMinDist());
      assertEquals(0, vertexPulse1.getMaxTime());
      assertEquals(Integer.MAX_VALUE, vertexPulse1.getMinTime());
      assertFalse(vertexPulse1.isInserteDist());
      assertEquals((-469), vertexPulse1.getMaxDist());
      assertEquals((-1317), vertexPulse1.getID());
      assertEquals(Integer.MAX_VALUE, vertexPulse1.getCompareCriteria());
      assertEquals((-1317), vertexPulse2.getID());
      assertEquals(Integer.MAX_VALUE, vertexPulse2.getCompareCriteria());
      assertEquals((-469), vertexPulse2.getMaxDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse2.getMinTime());
      assertEquals(Integer.MAX_VALUE, vertexPulse2.getMinDist());
      assertFalse(vertexPulse2.isInsertedTime());
      assertFalse(vertexPulse2.isInserteDist());
      assertEquals(0, vertexPulse2.getMaxTime());
      assertEquals(Integer.MAX_VALUE, vertexPulse3.getMinDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse3.getMinTime());
      assertEquals((-469), vertexPulse3.getMaxDist());
      assertFalse(vertexPulse3.isInsertedTime());
      assertEquals(0, vertexPulse3.getMaxTime());
      assertEquals((-1317), vertexPulse3.getID());
      assertFalse(vertexPulse3.isInserteDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse3.getCompareCriteria());
      assertEquals(1, edgePulse0.getWeightDist());
      assertEquals((-1078), edgePulse0.getWeightTime());
      assertEquals(Integer.MAX_VALUE, edgePulse0.getID());
      assertEquals((-2), edgePulse0.getCompareCriteria());
      assertEquals(Integer.MAX_VALUE, vertexPulse4.getMinDist());
      assertFalse(vertexPulse4.isInsertedTime());
      assertEquals(Integer.MAX_VALUE, vertexPulse4.getMinTime());
      assertFalse(vertexPulse4.isInserteDist());
      assertEquals(0, vertexPulse4.getMaxTime());
      assertEquals((-1317), vertexPulse4.getID());
      assertEquals((-469), vertexPulse4.getMaxDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse4.getCompareCriteria());
      assertEquals(787, edgePulse1.getID());
      assertEquals(Integer.MAX_VALUE, edgePulse1.getWeightTime());
      assertEquals((-1), edgePulse1.getWeightDist());
      assertEquals((-2), edgePulse1.getCompareCriteria());
      
      edgePulse1.setNextE(edgePulse0);
      assertFalse(edgePulse0.equals((Object)edgePulse1));
      assertFalse(edgePulse1.equals((Object)edgePulse0));
      assertSame(vertexPulse0, vertexPulse3);
      assertSame(vertexPulse0, vertexPulse1);
      assertSame(vertexPulse0, vertexPulse2);
      assertSame(vertexPulse0, vertexPulse4);
      assertSame(vertexPulse1, vertexPulse2);
      assertSame(vertexPulse1, vertexPulse0);
      assertSame(vertexPulse1, vertexPulse3);
      assertSame(vertexPulse1, vertexPulse4);
      assertSame(vertexPulse2, vertexPulse1);
      assertSame(vertexPulse2, vertexPulse3);
      assertSame(vertexPulse2, vertexPulse4);
      assertSame(vertexPulse2, vertexPulse0);
      assertSame(vertexPulse3, vertexPulse4);
      assertSame(vertexPulse3, vertexPulse0);
      assertSame(vertexPulse3, vertexPulse2);
      assertSame(vertexPulse3, vertexPulse1);
      assertNotSame(edgePulse0, edgePulse1);
      assertSame(vertexPulse4, vertexPulse2);
      assertSame(vertexPulse4, vertexPulse0);
      assertSame(vertexPulse4, vertexPulse1);
      assertSame(vertexPulse4, vertexPulse3);
      assertNotSame(edgePulse1, edgePulse0);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinDist());
      assertEquals((-1317), vertexPulse0.getID());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinTime());
      assertEquals(0, vertexPulse0.getMaxTime());
      assertFalse(vertexPulse0.isInserteDist());
      assertFalse(vertexPulse0.isInsertedTime());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getCompareCriteria());
      assertEquals((-469), vertexPulse0.getMaxDist());
      assertFalse(vertexPulse1.isInsertedTime());
      assertEquals(Integer.MAX_VALUE, vertexPulse1.getMinDist());
      assertEquals(0, vertexPulse1.getMaxTime());
      assertEquals(Integer.MAX_VALUE, vertexPulse1.getMinTime());
      assertFalse(vertexPulse1.isInserteDist());
      assertEquals((-469), vertexPulse1.getMaxDist());
      assertEquals((-1317), vertexPulse1.getID());
      assertEquals(Integer.MAX_VALUE, vertexPulse1.getCompareCriteria());
      assertEquals((-1317), vertexPulse2.getID());
      assertEquals(Integer.MAX_VALUE, vertexPulse2.getCompareCriteria());
      assertEquals((-469), vertexPulse2.getMaxDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse2.getMinTime());
      assertEquals(Integer.MAX_VALUE, vertexPulse2.getMinDist());
      assertFalse(vertexPulse2.isInsertedTime());
      assertFalse(vertexPulse2.isInserteDist());
      assertEquals(0, vertexPulse2.getMaxTime());
      assertEquals(Integer.MAX_VALUE, vertexPulse3.getMinDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse3.getMinTime());
      assertEquals((-469), vertexPulse3.getMaxDist());
      assertFalse(vertexPulse3.isInsertedTime());
      assertEquals(0, vertexPulse3.getMaxTime());
      assertEquals((-1317), vertexPulse3.getID());
      assertFalse(vertexPulse3.isInserteDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse3.getCompareCriteria());
      assertEquals(1, edgePulse0.getWeightDist());
      assertEquals((-1078), edgePulse0.getWeightTime());
      assertEquals(Integer.MAX_VALUE, edgePulse0.getID());
      assertEquals((-2), edgePulse0.getCompareCriteria());
      assertEquals(Integer.MAX_VALUE, vertexPulse4.getMinDist());
      assertFalse(vertexPulse4.isInsertedTime());
      assertEquals(Integer.MAX_VALUE, vertexPulse4.getMinTime());
      assertFalse(vertexPulse4.isInserteDist());
      assertEquals(0, vertexPulse4.getMaxTime());
      assertEquals((-1317), vertexPulse4.getID());
      assertEquals((-469), vertexPulse4.getMaxDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse4.getCompareCriteria());
      assertEquals(787, edgePulse1.getID());
      assertEquals(Integer.MAX_VALUE, edgePulse1.getWeightTime());
      assertEquals((-1), edgePulse1.getWeightDist());
      assertEquals((-2), edgePulse1.getCompareCriteria());
      
      int int0 = edgePulse0.getWeightDist();
      assertFalse(edgePulse0.equals((Object)edgePulse1));
      assertSame(vertexPulse0, vertexPulse3);
      assertSame(vertexPulse0, vertexPulse1);
      assertSame(vertexPulse0, vertexPulse2);
      assertSame(vertexPulse0, vertexPulse4);
      assertSame(vertexPulse1, vertexPulse2);
      assertSame(vertexPulse1, vertexPulse0);
      assertSame(vertexPulse1, vertexPulse3);
      assertSame(vertexPulse1, vertexPulse4);
      assertSame(vertexPulse2, vertexPulse1);
      assertSame(vertexPulse2, vertexPulse3);
      assertSame(vertexPulse2, vertexPulse4);
      assertSame(vertexPulse2, vertexPulse0);
      assertSame(vertexPulse3, vertexPulse4);
      assertSame(vertexPulse3, vertexPulse0);
      assertSame(vertexPulse3, vertexPulse2);
      assertSame(vertexPulse3, vertexPulse1);
      assertNotSame(edgePulse0, edgePulse1);
      assertEquals(1, int0);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinDist());
      assertEquals((-1317), vertexPulse0.getID());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinTime());
      assertEquals(0, vertexPulse0.getMaxTime());
      assertFalse(vertexPulse0.isInserteDist());
      assertFalse(vertexPulse0.isInsertedTime());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getCompareCriteria());
      assertEquals((-469), vertexPulse0.getMaxDist());
      assertFalse(vertexPulse1.isInsertedTime());
      assertEquals(Integer.MAX_VALUE, vertexPulse1.getMinDist());
      assertEquals(0, vertexPulse1.getMaxTime());
      assertEquals(Integer.MAX_VALUE, vertexPulse1.getMinTime());
      assertFalse(vertexPulse1.isInserteDist());
      assertEquals((-469), vertexPulse1.getMaxDist());
      assertEquals((-1317), vertexPulse1.getID());
      assertEquals(Integer.MAX_VALUE, vertexPulse1.getCompareCriteria());
      assertEquals((-1317), vertexPulse2.getID());
      assertEquals(Integer.MAX_VALUE, vertexPulse2.getCompareCriteria());
      assertEquals((-469), vertexPulse2.getMaxDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse2.getMinTime());
      assertEquals(Integer.MAX_VALUE, vertexPulse2.getMinDist());
      assertFalse(vertexPulse2.isInsertedTime());
      assertFalse(vertexPulse2.isInserteDist());
      assertEquals(0, vertexPulse2.getMaxTime());
      assertEquals(Integer.MAX_VALUE, vertexPulse3.getMinDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse3.getMinTime());
      assertEquals((-469), vertexPulse3.getMaxDist());
      assertFalse(vertexPulse3.isInsertedTime());
      assertEquals(0, vertexPulse3.getMaxTime());
      assertEquals((-1317), vertexPulse3.getID());
      assertFalse(vertexPulse3.isInserteDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse3.getCompareCriteria());
      assertEquals(1, edgePulse0.getWeightDist());
      assertEquals((-1078), edgePulse0.getWeightTime());
      assertEquals(Integer.MAX_VALUE, edgePulse0.getID());
      assertEquals((-2), edgePulse0.getCompareCriteria());
      
      int int1 = edgePulse1.getID();
      assertFalse(edgePulse1.equals((Object)edgePulse0));
      assertFalse(int1 == int0);
      assertSame(vertexPulse0, vertexPulse3);
      assertSame(vertexPulse0, vertexPulse1);
      assertSame(vertexPulse0, vertexPulse2);
      assertSame(vertexPulse0, vertexPulse4);
      assertSame(vertexPulse1, vertexPulse2);
      assertSame(vertexPulse1, vertexPulse0);
      assertSame(vertexPulse1, vertexPulse3);
      assertSame(vertexPulse1, vertexPulse4);
      assertSame(vertexPulse2, vertexPulse1);
      assertSame(vertexPulse2, vertexPulse3);
      assertSame(vertexPulse2, vertexPulse4);
      assertSame(vertexPulse2, vertexPulse0);
      assertSame(vertexPulse3, vertexPulse4);
      assertSame(vertexPulse3, vertexPulse0);
      assertSame(vertexPulse3, vertexPulse2);
      assertSame(vertexPulse3, vertexPulse1);
      assertSame(vertexPulse4, vertexPulse2);
      assertSame(vertexPulse4, vertexPulse0);
      assertSame(vertexPulse4, vertexPulse1);
      assertSame(vertexPulse4, vertexPulse3);
      assertNotSame(edgePulse1, edgePulse0);
      assertEquals(787, int1);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinDist());
      assertEquals((-1317), vertexPulse0.getID());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinTime());
      assertEquals(0, vertexPulse0.getMaxTime());
      assertFalse(vertexPulse0.isInserteDist());
      assertFalse(vertexPulse0.isInsertedTime());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getCompareCriteria());
      assertEquals((-469), vertexPulse0.getMaxDist());
      assertFalse(vertexPulse1.isInsertedTime());
      assertEquals(Integer.MAX_VALUE, vertexPulse1.getMinDist());
      assertEquals(0, vertexPulse1.getMaxTime());
      assertEquals(Integer.MAX_VALUE, vertexPulse1.getMinTime());
      assertFalse(vertexPulse1.isInserteDist());
      assertEquals((-469), vertexPulse1.getMaxDist());
      assertEquals((-1317), vertexPulse1.getID());
      assertEquals(Integer.MAX_VALUE, vertexPulse1.getCompareCriteria());
      assertEquals((-1317), vertexPulse2.getID());
      assertEquals(Integer.MAX_VALUE, vertexPulse2.getCompareCriteria());
      assertEquals((-469), vertexPulse2.getMaxDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse2.getMinTime());
      assertEquals(Integer.MAX_VALUE, vertexPulse2.getMinDist());
      assertFalse(vertexPulse2.isInsertedTime());
      assertFalse(vertexPulse2.isInserteDist());
      assertEquals(0, vertexPulse2.getMaxTime());
      assertEquals(Integer.MAX_VALUE, vertexPulse3.getMinDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse3.getMinTime());
      assertEquals((-469), vertexPulse3.getMaxDist());
      assertFalse(vertexPulse3.isInsertedTime());
      assertEquals(0, vertexPulse3.getMaxTime());
      assertEquals((-1317), vertexPulse3.getID());
      assertFalse(vertexPulse3.isInserteDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse3.getCompareCriteria());
      assertEquals(Integer.MAX_VALUE, vertexPulse4.getMinDist());
      assertFalse(vertexPulse4.isInsertedTime());
      assertEquals(Integer.MAX_VALUE, vertexPulse4.getMinTime());
      assertFalse(vertexPulse4.isInserteDist());
      assertEquals(0, vertexPulse4.getMaxTime());
      assertEquals((-1317), vertexPulse4.getID());
      assertEquals((-469), vertexPulse4.getMaxDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse4.getCompareCriteria());
      assertEquals(787, edgePulse1.getID());
      assertEquals(Integer.MAX_VALUE, edgePulse1.getWeightTime());
      assertEquals((-1), edgePulse1.getWeightDist());
      assertEquals((-2), edgePulse1.getCompareCriteria());
      
      vertexPulse0.minDist = (-471);
      assertEquals((-1317), vertexPulse0.getID());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinTime());
      assertEquals(0, vertexPulse0.getMaxTime());
      assertEquals((-471), vertexPulse0.getCompareCriteria());
      assertFalse(vertexPulse0.isInserteDist());
      assertEquals((-471), vertexPulse0.getMinDist());
      assertFalse(vertexPulse0.isInsertedTime());
      assertEquals((-469), vertexPulse0.getMaxDist());
      
      int int2 = edgePulse1.getCompareCriteria();
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(edgePulse1.equals((Object)edgePulse0));
      assertSame(vertexPulse0, vertexPulse3);
      assertSame(vertexPulse0, vertexPulse1);
      assertSame(vertexPulse0, vertexPulse2);
      assertSame(vertexPulse0, vertexPulse4);
      assertSame(vertexPulse1, vertexPulse2);
      assertSame(vertexPulse1, vertexPulse0);
      assertSame(vertexPulse1, vertexPulse3);
      assertSame(vertexPulse1, vertexPulse4);
      assertSame(vertexPulse2, vertexPulse1);
      assertSame(vertexPulse2, vertexPulse3);
      assertSame(vertexPulse2, vertexPulse4);
      assertSame(vertexPulse2, vertexPulse0);
      assertSame(vertexPulse3, vertexPulse4);
      assertSame(vertexPulse3, vertexPulse0);
      assertSame(vertexPulse3, vertexPulse2);
      assertSame(vertexPulse3, vertexPulse1);
      assertSame(vertexPulse4, vertexPulse2);
      assertSame(vertexPulse4, vertexPulse0);
      assertSame(vertexPulse4, vertexPulse1);
      assertSame(vertexPulse4, vertexPulse3);
      assertNotSame(edgePulse1, edgePulse0);
      assertEquals(2147483176, int2);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals((-1317), vertexPulse0.getID());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinTime());
      assertEquals(0, vertexPulse0.getMaxTime());
      assertEquals((-471), vertexPulse0.getCompareCriteria());
      assertFalse(vertexPulse0.isInserteDist());
      assertEquals((-471), vertexPulse0.getMinDist());
      assertFalse(vertexPulse0.isInsertedTime());
      assertEquals((-469), vertexPulse0.getMaxDist());
      assertFalse(vertexPulse1.isInsertedTime());
      assertEquals((-471), vertexPulse1.getMinDist());
      assertEquals(0, vertexPulse1.getMaxTime());
      assertEquals(Integer.MAX_VALUE, vertexPulse1.getMinTime());
      assertFalse(vertexPulse1.isInserteDist());
      assertEquals((-471), vertexPulse1.getCompareCriteria());
      assertEquals((-469), vertexPulse1.getMaxDist());
      assertEquals((-1317), vertexPulse1.getID());
      assertEquals((-471), vertexPulse2.getMinDist());
      assertEquals((-1317), vertexPulse2.getID());
      assertEquals((-469), vertexPulse2.getMaxDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse2.getMinTime());
      assertFalse(vertexPulse2.isInsertedTime());
      assertFalse(vertexPulse2.isInserteDist());
      assertEquals((-471), vertexPulse2.getCompareCriteria());
      assertEquals(0, vertexPulse2.getMaxTime());
      assertEquals((-471), vertexPulse3.getCompareCriteria());
      assertEquals(Integer.MAX_VALUE, vertexPulse3.getMinTime());
      assertEquals((-469), vertexPulse3.getMaxDist());
      assertFalse(vertexPulse3.isInsertedTime());
      assertEquals((-471), vertexPulse3.getMinDist());
      assertEquals(0, vertexPulse3.getMaxTime());
      assertEquals((-1317), vertexPulse3.getID());
      assertFalse(vertexPulse3.isInserteDist());
      assertEquals((-471), vertexPulse4.getCompareCriteria());
      assertFalse(vertexPulse4.isInsertedTime());
      assertEquals(Integer.MAX_VALUE, vertexPulse4.getMinTime());
      assertFalse(vertexPulse4.isInserteDist());
      assertEquals((-471), vertexPulse4.getMinDist());
      assertEquals(0, vertexPulse4.getMaxTime());
      assertEquals((-1317), vertexPulse4.getID());
      assertEquals((-469), vertexPulse4.getMaxDist());
      assertEquals(787, edgePulse1.getID());
      assertEquals(2147483176, edgePulse1.getCompareCriteria());
      assertEquals(Integer.MAX_VALUE, edgePulse1.getWeightTime());
      assertEquals((-1), edgePulse1.getWeightDist());
      
      int int3 = edgePulse1.getWeightDist();
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(edgePulse1.equals((Object)edgePulse0));
      assertSame(vertexPulse0, vertexPulse3);
      assertSame(vertexPulse0, vertexPulse1);
      assertSame(vertexPulse0, vertexPulse2);
      assertSame(vertexPulse0, vertexPulse4);
      assertSame(vertexPulse1, vertexPulse2);
      assertSame(vertexPulse1, vertexPulse0);
      assertSame(vertexPulse1, vertexPulse3);
      assertSame(vertexPulse1, vertexPulse4);
      assertSame(vertexPulse2, vertexPulse1);
      assertSame(vertexPulse2, vertexPulse3);
      assertSame(vertexPulse2, vertexPulse4);
      assertSame(vertexPulse2, vertexPulse0);
      assertSame(vertexPulse3, vertexPulse4);
      assertSame(vertexPulse3, vertexPulse0);
      assertSame(vertexPulse3, vertexPulse2);
      assertSame(vertexPulse3, vertexPulse1);
      assertSame(vertexPulse4, vertexPulse2);
      assertSame(vertexPulse4, vertexPulse0);
      assertSame(vertexPulse4, vertexPulse1);
      assertSame(vertexPulse4, vertexPulse3);
      assertNotSame(edgePulse1, edgePulse0);
      assertEquals((-1), int3);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals((-1317), vertexPulse0.getID());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinTime());
      assertEquals(0, vertexPulse0.getMaxTime());
      assertEquals((-471), vertexPulse0.getCompareCriteria());
      assertFalse(vertexPulse0.isInserteDist());
      assertEquals((-471), vertexPulse0.getMinDist());
      assertFalse(vertexPulse0.isInsertedTime());
      assertEquals((-469), vertexPulse0.getMaxDist());
      assertFalse(vertexPulse1.isInsertedTime());
      assertEquals((-471), vertexPulse1.getMinDist());
      assertEquals(0, vertexPulse1.getMaxTime());
      assertEquals(Integer.MAX_VALUE, vertexPulse1.getMinTime());
      assertFalse(vertexPulse1.isInserteDist());
      assertEquals((-471), vertexPulse1.getCompareCriteria());
      assertEquals((-469), vertexPulse1.getMaxDist());
      assertEquals((-1317), vertexPulse1.getID());
      assertEquals((-471), vertexPulse2.getMinDist());
      assertEquals((-1317), vertexPulse2.getID());
      assertEquals((-469), vertexPulse2.getMaxDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse2.getMinTime());
      assertFalse(vertexPulse2.isInsertedTime());
      assertFalse(vertexPulse2.isInserteDist());
      assertEquals((-471), vertexPulse2.getCompareCriteria());
      assertEquals(0, vertexPulse2.getMaxTime());
      assertEquals((-471), vertexPulse3.getCompareCriteria());
      assertEquals(Integer.MAX_VALUE, vertexPulse3.getMinTime());
      assertEquals((-469), vertexPulse3.getMaxDist());
      assertFalse(vertexPulse3.isInsertedTime());
      assertEquals((-471), vertexPulse3.getMinDist());
      assertEquals(0, vertexPulse3.getMaxTime());
      assertEquals((-1317), vertexPulse3.getID());
      assertFalse(vertexPulse3.isInserteDist());
      assertEquals((-471), vertexPulse4.getCompareCriteria());
      assertFalse(vertexPulse4.isInsertedTime());
      assertEquals(Integer.MAX_VALUE, vertexPulse4.getMinTime());
      assertFalse(vertexPulse4.isInserteDist());
      assertEquals((-471), vertexPulse4.getMinDist());
      assertEquals(0, vertexPulse4.getMaxTime());
      assertEquals((-1317), vertexPulse4.getID());
      assertEquals((-469), vertexPulse4.getMaxDist());
      assertEquals(787, edgePulse1.getID());
      assertEquals(2147483176, edgePulse1.getCompareCriteria());
      assertEquals(Integer.MAX_VALUE, edgePulse1.getWeightTime());
      assertEquals((-1), edgePulse1.getWeightDist());
      
      EdgePulse edgePulse2 = edgePulse0.getNext();
      assertFalse(edgePulse2.equals((Object)edgePulse0));
      assertFalse(edgePulse0.equals((Object)edgePulse1));
      assertSame(vertexPulse0, vertexPulse3);
      assertSame(vertexPulse0, vertexPulse1);
      assertSame(vertexPulse0, vertexPulse2);
      assertSame(vertexPulse0, vertexPulse4);
      assertSame(vertexPulse1, vertexPulse2);
      assertSame(vertexPulse1, vertexPulse0);
      assertSame(vertexPulse1, vertexPulse3);
      assertSame(vertexPulse1, vertexPulse4);
      assertSame(vertexPulse2, vertexPulse1);
      assertSame(vertexPulse2, vertexPulse3);
      assertSame(vertexPulse2, vertexPulse4);
      assertSame(vertexPulse2, vertexPulse0);
      assertNotSame(edgePulse2, edgePulse0);
      assertSame(edgePulse2, edgePulse1);
      assertSame(vertexPulse3, vertexPulse4);
      assertSame(vertexPulse3, vertexPulse0);
      assertSame(vertexPulse3, vertexPulse2);
      assertSame(vertexPulse3, vertexPulse1);
      assertNotSame(edgePulse0, edgePulse2);
      assertNotSame(edgePulse0, edgePulse1);
      assertNotNull(edgePulse2);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals((-1317), vertexPulse0.getID());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinTime());
      assertEquals(0, vertexPulse0.getMaxTime());
      assertEquals((-471), vertexPulse0.getCompareCriteria());
      assertFalse(vertexPulse0.isInserteDist());
      assertEquals((-471), vertexPulse0.getMinDist());
      assertFalse(vertexPulse0.isInsertedTime());
      assertEquals((-469), vertexPulse0.getMaxDist());
      assertFalse(vertexPulse1.isInsertedTime());
      assertEquals((-471), vertexPulse1.getMinDist());
      assertEquals(0, vertexPulse1.getMaxTime());
      assertEquals(Integer.MAX_VALUE, vertexPulse1.getMinTime());
      assertFalse(vertexPulse1.isInserteDist());
      assertEquals((-471), vertexPulse1.getCompareCriteria());
      assertEquals((-469), vertexPulse1.getMaxDist());
      assertEquals((-1317), vertexPulse1.getID());
      assertEquals((-471), vertexPulse2.getMinDist());
      assertEquals((-1317), vertexPulse2.getID());
      assertEquals((-469), vertexPulse2.getMaxDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse2.getMinTime());
      assertFalse(vertexPulse2.isInsertedTime());
      assertFalse(vertexPulse2.isInserteDist());
      assertEquals((-471), vertexPulse2.getCompareCriteria());
      assertEquals(0, vertexPulse2.getMaxTime());
      assertEquals(787, edgePulse2.getID());
      assertEquals(Integer.MAX_VALUE, edgePulse2.getWeightTime());
      assertEquals(2147483176, edgePulse2.getCompareCriteria());
      assertEquals((-1), edgePulse2.getWeightDist());
      assertEquals((-471), vertexPulse3.getCompareCriteria());
      assertEquals(Integer.MAX_VALUE, vertexPulse3.getMinTime());
      assertEquals((-469), vertexPulse3.getMaxDist());
      assertFalse(vertexPulse3.isInsertedTime());
      assertEquals((-471), vertexPulse3.getMinDist());
      assertEquals(0, vertexPulse3.getMaxTime());
      assertEquals((-1317), vertexPulse3.getID());
      assertFalse(vertexPulse3.isInserteDist());
      assertEquals(1, edgePulse0.getWeightDist());
      assertEquals(2147483176, edgePulse0.getCompareCriteria());
      assertEquals((-1078), edgePulse0.getWeightTime());
      assertEquals(Integer.MAX_VALUE, edgePulse0.getID());
  }

  @Test(timeout = 26000)
  public void test22()  throws Throwable  {
      VertexPulse vertexPulse0 = new VertexPulse(0);
      EdgePulse edgePulse0 = vertexPulse0.getReversedEdges();
      EdgePulse edgePulse1 = new EdgePulse(0, 0, vertexPulse0, vertexPulse0, (-1));
      vertexPulse0.setMinDist((-1));
      vertexPulse0.unlinkRighBoundDist();
      vertexPulse0.maxTime = (-1);
      edgePulse1.getTarget();
      edgePulse1.getTarget();
      edgePulse0.addNextCommonTailEdge(edgePulse1);
      edgePulse1.getTarget();
      edgePulse1.getWeightTime();
  }

  @Test(timeout = 26000)
  public void test23()  throws Throwable  {
      VertexPulse vertexPulse0 = new VertexPulse(0);
      EdgePulse edgePulse0 = vertexPulse0.getReversedEdges();
      EdgePulse edgePulse1 = new EdgePulse(Integer.MAX_VALUE, Integer.MAX_VALUE, vertexPulse0, vertexPulse0, 0);
      edgePulse0.addNextCommonTailEdge(edgePulse1);
      EdgePulse edgePulse2 = edgePulse0.findEdgebyTarget(vertexPulse0);
      edgePulse2.findEdgebyTarget(vertexPulse0);
      edgePulse0.getID();
      edgePulse2.getID();
      edgePulse2.getSource();
  }

  @Test(timeout = 26000)
  public void test24()  throws Throwable  {
      VertexPulse vertexPulse0 = new VertexPulse((-3272));
      VertexPulse vertexPulse1 = vertexPulse0.getBLeftTime();
      ArrayList<Integer> arrayList0 = vertexPulse0.magicIndex;
      arrayList0.add(0, (Integer) null);
      vertexPulse1.QS(arrayList0, 0, 0);
      VertexPulse vertexPulse2 = vertexPulse1.getBRigthTime();
      EdgePulse edgePulse0 = new EdgePulse(0, (-3272), vertexPulse2, vertexPulse1, (-3272));
      EdgePulse edgePulse1 = vertexPulse0.getReversedEdges();
      edgePulse1.addNextCommonTailEdge(edgePulse0);
      edgePulse0.setNextE(edgePulse1);
      edgePulse0.getNext();
      edgePulse1.getWeightTime();
      edgePulse0.findEdgebyTarget(vertexPulse1);
  }

  @Test(timeout = 26000)
  public void test25()  throws Throwable  {
      VertexPulse vertexPulse0 = new VertexPulse(0);
      VertexPulse vertexPulse1 = new VertexPulse(Integer.MAX_VALUE);
      vertexPulse1.setMaxDist((-2202));
      EdgePulse edgePulse0 = vertexPulse1.getReversedEdges();
      edgePulse0.getTarget();
      edgePulse0.getSource();
  }

  @Test(timeout = 26000)
  public void test26()  throws Throwable  {
      VertexPulse vertexPulse0 = new VertexPulse(1985);
      VertexPulse vertexPulse1 = vertexPulse0.getBLeftTime();
      EdgePulse edgePulse0 = new EdgePulse((-1256), 0, vertexPulse1, vertexPulse1, Integer.MAX_VALUE);
      edgePulse0.getWeightDist();
  }

  @Test(timeout = 26000)
  public void test27()  throws Throwable  {
      VertexPulse vertexPulse0 = new VertexPulse((-1199));
      VertexPulse vertexPulse1 = vertexPulse0.getBLeftTime();
      VertexPulse vertexPulse2 = vertexPulse1.getBRigthDist();
      vertexPulse1.firstTime = true;
      vertexPulse0.minDist = Integer.MAX_VALUE;
      vertexPulse0.setInsertedDist();
      vertexPulse1.unlinkRighBoundTime();
      vertexPulse2.fastUnlinkTime();
      VertexPulse vertexPulse3 = new VertexPulse((-151));
      VertexPulse vertexPulse4 = vertexPulse0.getBLeftDist();
      EdgePulse edgePulse0 = new EdgePulse((-2908), (-3661), vertexPulse3, vertexPulse4, 0);
      vertexPulse2.addReversedEdge(edgePulse0);
      EdgePulse edgePulse1 = vertexPulse2.getReversedEdges();
      VertexPulse vertexPulse5 = edgePulse1.getSource();
      edgePulse1.getWeightTime();
      edgePulse1.getID();
      EdgePulse edgePulse2 = edgePulse1.findEdgebyTarget(vertexPulse0);
      edgePulse1.setNextE(edgePulse2);
      edgePulse2.getCompareCriteria();
      edgePulse2.getTarget();
      // Undeclared exception!
      try { 
        edgePulse1.findEdgebyTarget(vertexPulse5);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 26000)
  public void test28()  throws Throwable  {
      VertexPulse vertexPulse0 = new VertexPulse((-638));
      VertexPulse vertexPulse1 = vertexPulse0.getBLeftDist();
      VertexPulse vertexPulse2 = vertexPulse1.getBRigthDist();
      VertexPulse vertexPulse3 = vertexPulse2.getBRigthTime();
      EdgePulse edgePulse0 = vertexPulse3.getReversedEdges();
      EdgePulse edgePulse1 = edgePulse0.findEdgebyTarget(vertexPulse2);
      edgePulse1.getWeightDist();
  }

  @Test(timeout = 26000)
  public void test29()  throws Throwable  {
      VertexPulse vertexPulse0 = new VertexPulse((-1));
      VertexPulse vertexPulse1 = vertexPulse0.getBRigthDist();
      VertexPulse vertexPulse2 = vertexPulse1.getBLeftTime();
      VertexPulse vertexPulse3 = vertexPulse2.getBRigthTime();
      EdgePulse edgePulse0 = vertexPulse3.getReversedEdges();
      EdgePulse edgePulse1 = edgePulse0.findEdgebyTarget(vertexPulse2);
      vertexPulse1.LabelTime2 = Double.POSITIVE_INFINITY;
      edgePulse1.addNextCommonTailEdge(edgePulse0);
      EdgePulse edgePulse2 = edgePulse1.getNext();
      edgePulse1.setNextE(edgePulse2);
      edgePulse1.getSource();
      edgePulse1.getID();
      edgePulse1.getWeightTime();
  }

  @Test(timeout = 26000)
  public void test30()  throws Throwable  {
      VertexPulse vertexPulse0 = new VertexPulse((-1));
      VertexPulse vertexPulse1 = vertexPulse0.getBLeftTime();
      VertexPulse vertexPulse2 = vertexPulse1.getBLeftDist();
      VertexPulse vertexPulse3 = vertexPulse2.getBRigthDist();
      EdgePulse edgePulse0 = new EdgePulse(0, 0, vertexPulse3, vertexPulse3, 0);
      edgePulse0.getSource();
  }

  @Test(timeout = 26000)
  public void test31()  throws Throwable  {
      VertexPulse vertexPulse0 = new VertexPulse(0);
      VertexPulse vertexPulse1 = vertexPulse0.getBRigthDist();
      EdgePulse edgePulse0 = vertexPulse1.getReversedEdges();
      edgePulse0.getTarget();
  }

  @Test(timeout = 26000)
  public void test32()  throws Throwable  {
      VertexPulse vertexPulse0 = new VertexPulse(2751);
      VertexPulse vertexPulse1 = vertexPulse0.getBLeftDist();
      VertexPulse vertexPulse2 = vertexPulse1.getBLeftTime();
      vertexPulse2.maxTime = 278;
      EdgePulse edgePulse0 = new EdgePulse(2751, 413, vertexPulse2, vertexPulse1, 0);
      EdgePulse edgePulse1 = edgePulse0.findEdgebyTarget(vertexPulse1);
      edgePulse1.setNextE(edgePulse0);
      VertexPulse vertexPulse3 = edgePulse1.getSource();
      EdgePulse edgePulse2 = edgePulse0.findEdgebyTarget(vertexPulse3);
      edgePulse0.getNext();
      edgePulse2.getSource();
  }

  @Test(timeout = 26000)
  public void test33()  throws Throwable  {
      VertexPulse vertexPulse0 = new VertexPulse(0);
      VertexPulse vertexPulse1 = vertexPulse0.getBRigthDist();
      VertexPulse vertexPulse2 = vertexPulse1.getBLeftDist();
      VertexPulse vertexPulse3 = vertexPulse2.getBRigthTime();
      VertexPulse vertexPulse4 = vertexPulse2.getBLeftTime();
      assertSame(vertexPulse2, vertexPulse4);
      
      EdgePulse edgePulse0 = new EdgePulse(0, 0, vertexPulse3, vertexPulse4, Integer.MAX_VALUE);
      edgePulse0.getID();
  }

  @Test(timeout = 26000)
  public void test34()  throws Throwable  {
      VertexPulse vertexPulse0 = new VertexPulse(485);
      vertexPulse0.unLinkVertexDist();
      VertexPulse vertexPulse1 = vertexPulse0.getBLeftTime();
      VertexPulse vertexPulse2 = vertexPulse1.getBRigthDist();
      VertexPulse vertexPulse3 = vertexPulse2.getBLeftDist();
      EdgePulse edgePulse0 = new EdgePulse((-471), 0, vertexPulse3, vertexPulse3, 485);
      edgePulse0.getTarget();
  }

  @Test(timeout = 26000)
  public void test35()  throws Throwable  {
      VertexPulse vertexPulse0 = new VertexPulse(0);
      VertexPulse vertexPulse1 = vertexPulse0.getBLeftDist();
      VertexPulse vertexPulse2 = vertexPulse1.getBRigthTime();
      EdgePulse edgePulse0 = new EdgePulse((-3448), 0, vertexPulse2, (VertexPulse) null, 0);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      // Undeclared exception!
      try { 
        vertexPulse1.colocar(arrayList0, 0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 26000)
  public void test36()  throws Throwable  {
      VertexPulse vertexPulse0 = new VertexPulse(0);
      VertexPulse vertexPulse1 = vertexPulse0.getBRigthTime();
      VertexPulse vertexPulse2 = vertexPulse1.getBLeftTime();
      VertexPulse vertexPulse3 = vertexPulse2.getBLeftDist();
      EdgePulse edgePulse0 = vertexPulse3.getReversedEdges();
      EdgePulse edgePulse1 = new EdgePulse(Integer.MAX_VALUE, Integer.MAX_VALUE, vertexPulse1, vertexPulse2, 0);
      edgePulse0.addNextCommonTailEdge(edgePulse1);
      EdgePulse edgePulse2 = edgePulse0.findEdgebyTarget(vertexPulse1);
      VertexPulse vertexPulse4 = vertexPulse1.getBRigthTime();
      vertexPulse4.LabelTime1 = (-1.0);
      vertexPulse4.maxTime = 0;
      VertexPulse vertexPulse5 = vertexPulse4.getBRigthDist();
      EdgePulse edgePulse3 = new EdgePulse(Integer.MAX_VALUE, Integer.MAX_VALUE, vertexPulse2, vertexPulse2, Integer.MAX_VALUE);
      edgePulse2.addNextCommonTailEdge(edgePulse3);
      EdgePulse edgePulse4 = new EdgePulse(Integer.MAX_VALUE, 0, vertexPulse5, vertexPulse1, Integer.MAX_VALUE);
      edgePulse0.addNextCommonTailEdge(edgePulse4);
      edgePulse0.addNextCommonTailEdge(edgePulse2);
      EdgePulse edgePulse5 = edgePulse0.findEdgebyTarget(vertexPulse0);
      vertexPulse4.minTime = 1558;
      edgePulse5.setNextE(edgePulse0);
      edgePulse5.setNextE(edgePulse3);
      edgePulse5.getWeightTime();
      edgePulse5.setNextE(edgePulse0);
      edgePulse3.setNextE(edgePulse0);
      edgePulse3.getWeightDist();
      edgePulse5.getCompareCriteria();
      edgePulse1.getNext();
  }

  @Test(timeout = 26000)
  public void test37()  throws Throwable  {
      VertexPulse vertexPulse0 = new VertexPulse((-670));
      assertNotNull(vertexPulse0);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals(0, vertexPulse0.getMaxTime());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getCompareCriteria());
      assertFalse(vertexPulse0.isInserteDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinTime());
      assertEquals((-670), vertexPulse0.getID());
      assertFalse(vertexPulse0.isInsertedTime());
      assertEquals(0, vertexPulse0.getMaxDist());
      
      EdgePulse edgePulse0 = vertexPulse0.getReversedEdges();
      assertNotNull(edgePulse0);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals(0, vertexPulse0.getMaxTime());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getCompareCriteria());
      assertFalse(vertexPulse0.isInserteDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinTime());
      assertEquals((-670), vertexPulse0.getID());
      assertFalse(vertexPulse0.isInsertedTime());
      assertEquals(0, vertexPulse0.getMaxDist());
      assertEquals(1, edgePulse0.getWeightDist());
      assertEquals((-1), edgePulse0.getID());
      assertEquals((-2), edgePulse0.getCompareCriteria());
      assertEquals(1, edgePulse0.getWeightTime());
      
      EdgePulse edgePulse1 = vertexPulse0.getReversedEdges();
      assertFalse(edgePulse1.equals((Object)edgePulse0));
      assertNotSame(edgePulse1, edgePulse0);
      assertNotNull(edgePulse1);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals(0, vertexPulse0.getMaxTime());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getCompareCriteria());
      assertFalse(vertexPulse0.isInserteDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinTime());
      assertEquals((-670), vertexPulse0.getID());
      assertFalse(vertexPulse0.isInsertedTime());
      assertEquals(0, vertexPulse0.getMaxDist());
      assertEquals(1, edgePulse1.getWeightTime());
      assertEquals(1, edgePulse1.getWeightDist());
      assertEquals((-1), edgePulse1.getID());
      assertEquals((-2), edgePulse1.getCompareCriteria());
      
      edgePulse1.setNextE(edgePulse0);
      assertFalse(edgePulse0.equals((Object)edgePulse1));
      assertFalse(edgePulse1.equals((Object)edgePulse0));
      assertNotSame(edgePulse0, edgePulse1);
      assertNotSame(edgePulse1, edgePulse0);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals(0, vertexPulse0.getMaxTime());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getCompareCriteria());
      assertFalse(vertexPulse0.isInserteDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinTime());
      assertEquals((-670), vertexPulse0.getID());
      assertFalse(vertexPulse0.isInsertedTime());
      assertEquals(0, vertexPulse0.getMaxDist());
      assertEquals(1, edgePulse0.getWeightDist());
      assertEquals((-1), edgePulse0.getID());
      assertEquals((-2), edgePulse0.getCompareCriteria());
      assertEquals(1, edgePulse0.getWeightTime());
      assertEquals(1, edgePulse1.getWeightTime());
      assertEquals(1, edgePulse1.getWeightDist());
      assertEquals((-1), edgePulse1.getID());
      assertEquals((-2), edgePulse1.getCompareCriteria());
      
      vertexPulse0.LabelDist3 = 1.0;
      assertEquals(0, vertexPulse0.getMaxTime());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getCompareCriteria());
      assertFalse(vertexPulse0.isInserteDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinTime());
      assertEquals((-670), vertexPulse0.getID());
      assertFalse(vertexPulse0.isInsertedTime());
      assertEquals(0, vertexPulse0.getMaxDist());
      
      edgePulse1.addNextCommonTailEdge(edgePulse0);
      assertFalse(edgePulse0.equals((Object)edgePulse1));
      assertFalse(edgePulse1.equals((Object)edgePulse0));
      assertNotSame(edgePulse0, edgePulse1);
      assertNotSame(edgePulse1, edgePulse0);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals(0, vertexPulse0.getMaxTime());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getCompareCriteria());
      assertFalse(vertexPulse0.isInserteDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinTime());
      assertEquals((-670), vertexPulse0.getID());
      assertFalse(vertexPulse0.isInsertedTime());
      assertEquals(0, vertexPulse0.getMaxDist());
      assertEquals(1, edgePulse0.getWeightDist());
      assertEquals((-1), edgePulse0.getID());
      assertEquals((-2), edgePulse0.getCompareCriteria());
      assertEquals(1, edgePulse0.getWeightTime());
      assertEquals(1, edgePulse1.getWeightTime());
      assertEquals(1, edgePulse1.getWeightDist());
      assertEquals((-1), edgePulse1.getID());
      assertEquals((-2), edgePulse1.getCompareCriteria());
      
      edgePulse0.setNextE(edgePulse1);
      assertFalse(edgePulse0.equals((Object)edgePulse1));
      assertFalse(edgePulse1.equals((Object)edgePulse0));
      assertNotSame(edgePulse0, edgePulse1);
      assertNotSame(edgePulse1, edgePulse0);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals(0, vertexPulse0.getMaxTime());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getCompareCriteria());
      assertFalse(vertexPulse0.isInserteDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinTime());
      assertEquals((-670), vertexPulse0.getID());
      assertFalse(vertexPulse0.isInsertedTime());
      assertEquals(0, vertexPulse0.getMaxDist());
      assertEquals(1, edgePulse0.getWeightDist());
      assertEquals((-1), edgePulse0.getID());
      assertEquals((-2), edgePulse0.getCompareCriteria());
      assertEquals(1, edgePulse0.getWeightTime());
      assertEquals(1, edgePulse1.getWeightTime());
      assertEquals(1, edgePulse1.getWeightDist());
      assertEquals((-1), edgePulse1.getID());
      assertEquals((-2), edgePulse1.getCompareCriteria());
      
      vertexPulse0.LabelDist1 = (-440.96922428246575);
      assertEquals(0, vertexPulse0.getMaxTime());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getCompareCriteria());
      assertFalse(vertexPulse0.isInserteDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinTime());
      assertEquals((-670), vertexPulse0.getID());
      assertFalse(vertexPulse0.isInsertedTime());
      assertEquals(0, vertexPulse0.getMaxDist());
      
      EdgePulse edgePulse2 = edgePulse0.getNext();
      assertFalse(edgePulse0.equals((Object)edgePulse1));
      assertFalse(edgePulse2.equals((Object)edgePulse0));
      assertNotSame(edgePulse0, edgePulse2);
      assertNotSame(edgePulse0, edgePulse1);
      assertSame(edgePulse2, edgePulse1);
      assertNotSame(edgePulse2, edgePulse0);
      assertNotNull(edgePulse2);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals(0, vertexPulse0.getMaxTime());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getCompareCriteria());
      assertFalse(vertexPulse0.isInserteDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinTime());
      assertEquals((-670), vertexPulse0.getID());
      assertFalse(vertexPulse0.isInsertedTime());
      assertEquals(0, vertexPulse0.getMaxDist());
      assertEquals(1, edgePulse0.getWeightDist());
      assertEquals((-1), edgePulse0.getID());
      assertEquals((-2), edgePulse0.getCompareCriteria());
      assertEquals(1, edgePulse0.getWeightTime());
      assertEquals((-2), edgePulse2.getCompareCriteria());
      assertEquals(1, edgePulse2.getWeightDist());
      assertEquals((-1), edgePulse2.getID());
      assertEquals(1, edgePulse2.getWeightTime());
      
      vertexPulse0.fastUnlinkDist();
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals(0, vertexPulse0.getMaxTime());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getCompareCriteria());
      assertFalse(vertexPulse0.isInserteDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinTime());
      assertEquals((-670), vertexPulse0.getID());
      assertFalse(vertexPulse0.isInsertedTime());
      assertEquals(0, vertexPulse0.getMaxDist());
      
      edgePulse1.addNextCommonTailEdge(edgePulse2);
      edgePulse2.setNextE(edgePulse0);
      edgePulse2.addNextCommonTailEdge(edgePulse0);
      vertexPulse0.fastUnlinkTime();
      edgePulse2.addNextCommonTailEdge(edgePulse0);
      EdgePulse edgePulse3 = edgePulse2.findEdgebyTarget(vertexPulse0);
      edgePulse3.setNextE(edgePulse1);
      edgePulse3.setNextE(edgePulse0);
      edgePulse1.setNextE(edgePulse2);
      edgePulse3.setNextE(edgePulse2);
      VertexPulse vertexPulse1 = edgePulse3.getTarget();
      edgePulse2.getCompareCriteria();
      edgePulse3.getWeightTime();
      edgePulse3.getSource();
      edgePulse2.setNextE(edgePulse3);
      int int0 = (-1806);
      vertexPulse0.setMinTime(int0);
      edgePulse3.setNextE(edgePulse1);
      edgePulse2.addNextCommonTailEdge(edgePulse3);
      edgePulse0.getID();
      edgePulse3.getID();
      edgePulse1.getSource();
      edgePulse3.getSource();
      EdgePulse edgePulse4 = edgePulse0.findEdgebyTarget(vertexPulse1);
      edgePulse4.getCompareCriteria();
      edgePulse2.getCompareCriteria();
  }

  @Test(timeout = 26000)
  public void test38()  throws Throwable  {
      EdgePulse edgePulse0 = new EdgePulse(0, 0, (VertexPulse) null, (VertexPulse) null, 0);
      assertNotNull(edgePulse0);
      assertEquals(0, edgePulse0.getWeightTime());
      assertEquals(0, edgePulse0.getID());
      assertEquals(0, edgePulse0.getWeightDist());
      
      // Undeclared exception!
      try { 
        edgePulse0.findEdgebyTarget((VertexPulse) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("dimacs9.EdgePulse", e);
      }
  }

  @Test(timeout = 26000)
  public void test39()  throws Throwable  {
      VertexPulse vertexPulse0 = new VertexPulse((-40));
      assertNotNull(vertexPulse0);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getCompareCriteria());
      assertEquals((-40), vertexPulse0.getID());
      assertEquals(0, vertexPulse0.getMaxTime());
      assertFalse(vertexPulse0.isInserteDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinTime());
      assertEquals(0, vertexPulse0.getMaxDist());
      assertFalse(vertexPulse0.isInsertedTime());
      
      vertexPulse0.setMaxTime(0);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getCompareCriteria());
      assertEquals((-40), vertexPulse0.getID());
      assertEquals(0, vertexPulse0.getMaxTime());
      assertFalse(vertexPulse0.isInserteDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinTime());
      assertEquals(0, vertexPulse0.getMaxDist());
      assertFalse(vertexPulse0.isInsertedTime());
      
      VertexPulse vertexPulse1 = vertexPulse0.getBLeftTime();
      assertSame(vertexPulse0, vertexPulse1);
      assertSame(vertexPulse1, vertexPulse0);
      assertNotNull(vertexPulse1);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getCompareCriteria());
      assertEquals((-40), vertexPulse0.getID());
      assertEquals(0, vertexPulse0.getMaxTime());
      assertFalse(vertexPulse0.isInserteDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinTime());
      assertEquals(0, vertexPulse0.getMaxDist());
      assertFalse(vertexPulse0.isInsertedTime());
      assertFalse(vertexPulse1.isInserteDist());
      assertEquals(0, vertexPulse1.getMaxTime());
      assertEquals(0, vertexPulse1.getMaxDist());
      assertFalse(vertexPulse1.isInsertedTime());
      assertEquals((-40), vertexPulse1.getID());
      assertEquals(Integer.MAX_VALUE, vertexPulse1.getCompareCriteria());
      assertEquals(Integer.MAX_VALUE, vertexPulse1.getMinDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse1.getMinTime());
      
      EdgePulse edgePulse0 = new EdgePulse(0, 0, vertexPulse1, vertexPulse0, Integer.MAX_VALUE);
      assertNotNull(edgePulse0);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getCompareCriteria());
      assertEquals((-40), vertexPulse0.getID());
      assertEquals(0, vertexPulse0.getMaxTime());
      assertFalse(vertexPulse0.isInserteDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinTime());
      assertEquals(0, vertexPulse0.getMaxDist());
      assertFalse(vertexPulse0.isInsertedTime());
      assertFalse(vertexPulse1.isInserteDist());
      assertEquals(0, vertexPulse1.getMaxTime());
      assertEquals(0, vertexPulse1.getMaxDist());
      assertFalse(vertexPulse1.isInsertedTime());
      assertEquals((-40), vertexPulse1.getID());
      assertEquals(Integer.MAX_VALUE, vertexPulse1.getCompareCriteria());
      assertEquals(Integer.MAX_VALUE, vertexPulse1.getMinDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse1.getMinTime());
      assertEquals(0, edgePulse0.getWeightTime());
      assertEquals(0, edgePulse0.getWeightDist());
      assertEquals((-2), edgePulse0.getCompareCriteria());
      assertEquals(Integer.MAX_VALUE, edgePulse0.getID());
      
      EdgePulse edgePulse1 = edgePulse0.findEdgebyTarget(vertexPulse0);
      assertSame(vertexPulse0, vertexPulse1);
      assertSame(vertexPulse1, vertexPulse0);
      assertSame(edgePulse0, edgePulse1);
      assertSame(edgePulse1, edgePulse0);
      assertNotNull(edgePulse1);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getCompareCriteria());
      assertEquals((-40), vertexPulse0.getID());
      assertEquals(0, vertexPulse0.getMaxTime());
      assertFalse(vertexPulse0.isInserteDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinTime());
      assertEquals(0, vertexPulse0.getMaxDist());
      assertFalse(vertexPulse0.isInsertedTime());
      assertFalse(vertexPulse1.isInserteDist());
      assertEquals(0, vertexPulse1.getMaxTime());
      assertEquals(0, vertexPulse1.getMaxDist());
      assertFalse(vertexPulse1.isInsertedTime());
      assertEquals((-40), vertexPulse1.getID());
      assertEquals(Integer.MAX_VALUE, vertexPulse1.getCompareCriteria());
      assertEquals(Integer.MAX_VALUE, vertexPulse1.getMinDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse1.getMinTime());
      assertEquals(0, edgePulse0.getWeightTime());
      assertEquals(0, edgePulse0.getWeightDist());
      assertEquals((-2), edgePulse0.getCompareCriteria());
      assertEquals(Integer.MAX_VALUE, edgePulse0.getID());
      assertEquals(Integer.MAX_VALUE, edgePulse1.getID());
      assertEquals(0, edgePulse1.getWeightDist());
      assertEquals((-2), edgePulse1.getCompareCriteria());
      assertEquals(0, edgePulse1.getWeightTime());
      
      edgePulse1.addNextCommonTailEdge(edgePulse0);
      assertSame(vertexPulse0, vertexPulse1);
      assertSame(vertexPulse1, vertexPulse0);
      assertSame(edgePulse0, edgePulse1);
      assertSame(edgePulse1, edgePulse0);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getCompareCriteria());
      assertEquals((-40), vertexPulse0.getID());
      assertEquals(0, vertexPulse0.getMaxTime());
      assertFalse(vertexPulse0.isInserteDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinTime());
      assertEquals(0, vertexPulse0.getMaxDist());
      assertFalse(vertexPulse0.isInsertedTime());
      assertFalse(vertexPulse1.isInserteDist());
      assertEquals(0, vertexPulse1.getMaxTime());
      assertEquals(0, vertexPulse1.getMaxDist());
      assertFalse(vertexPulse1.isInsertedTime());
      assertEquals((-40), vertexPulse1.getID());
      assertEquals(Integer.MAX_VALUE, vertexPulse1.getCompareCriteria());
      assertEquals(Integer.MAX_VALUE, vertexPulse1.getMinDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse1.getMinTime());
      assertEquals(0, edgePulse0.getWeightTime());
      assertEquals(0, edgePulse0.getWeightDist());
      assertEquals((-2), edgePulse0.getCompareCriteria());
      assertEquals(Integer.MAX_VALUE, edgePulse0.getID());
      assertEquals(Integer.MAX_VALUE, edgePulse1.getID());
      assertEquals(0, edgePulse1.getWeightDist());
      assertEquals((-2), edgePulse1.getCompareCriteria());
      assertEquals(0, edgePulse1.getWeightTime());
      
      EdgePulse edgePulse2 = edgePulse1.findEdgebyTarget(vertexPulse0);
      assertSame(vertexPulse0, vertexPulse1);
      assertSame(vertexPulse1, vertexPulse0);
      assertSame(edgePulse0, edgePulse1);
      assertSame(edgePulse0, edgePulse2);
      assertSame(edgePulse1, edgePulse2);
      assertSame(edgePulse1, edgePulse0);
      assertSame(edgePulse2, edgePulse1);
      assertSame(edgePulse2, edgePulse0);
      assertNotNull(edgePulse2);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getCompareCriteria());
      assertEquals((-40), vertexPulse0.getID());
      assertEquals(0, vertexPulse0.getMaxTime());
      assertFalse(vertexPulse0.isInserteDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinTime());
      assertEquals(0, vertexPulse0.getMaxDist());
      assertFalse(vertexPulse0.isInsertedTime());
      assertFalse(vertexPulse1.isInserteDist());
      assertEquals(0, vertexPulse1.getMaxTime());
      assertEquals(0, vertexPulse1.getMaxDist());
      assertFalse(vertexPulse1.isInsertedTime());
      assertEquals((-40), vertexPulse1.getID());
      assertEquals(Integer.MAX_VALUE, vertexPulse1.getCompareCriteria());
      assertEquals(Integer.MAX_VALUE, vertexPulse1.getMinDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse1.getMinTime());
      assertEquals(0, edgePulse0.getWeightTime());
      assertEquals(0, edgePulse0.getWeightDist());
      assertEquals((-2), edgePulse0.getCompareCriteria());
      assertEquals(Integer.MAX_VALUE, edgePulse0.getID());
      assertEquals(Integer.MAX_VALUE, edgePulse1.getID());
      assertEquals(0, edgePulse1.getWeightDist());
      assertEquals((-2), edgePulse1.getCompareCriteria());
      assertEquals(0, edgePulse1.getWeightTime());
      assertEquals(0, edgePulse2.getWeightTime());
      assertEquals((-2), edgePulse2.getCompareCriteria());
      assertEquals(Integer.MAX_VALUE, edgePulse2.getID());
      assertEquals(0, edgePulse2.getWeightDist());
      
      vertexPulse1.LabelTime1 = (double) 0;
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getCompareCriteria());
      assertEquals((-40), vertexPulse0.getID());
      assertEquals(0, vertexPulse0.getMaxTime());
      assertFalse(vertexPulse0.isInserteDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinTime());
      assertEquals(0, vertexPulse0.getMaxDist());
      assertFalse(vertexPulse0.isInsertedTime());
      assertFalse(vertexPulse1.isInserteDist());
      assertEquals(0, vertexPulse1.getMaxTime());
      assertEquals(0, vertexPulse1.getMaxDist());
      assertFalse(vertexPulse1.isInsertedTime());
      assertEquals((-40), vertexPulse1.getID());
      assertEquals(Integer.MAX_VALUE, vertexPulse1.getCompareCriteria());
      assertEquals(Integer.MAX_VALUE, vertexPulse1.getMinDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse1.getMinTime());
      
      edgePulse2.setNextE(edgePulse0);
      assertSame(vertexPulse0, vertexPulse1);
      assertSame(vertexPulse1, vertexPulse0);
      assertSame(edgePulse0, edgePulse1);
      assertSame(edgePulse0, edgePulse2);
      assertSame(edgePulse1, edgePulse2);
      assertSame(edgePulse1, edgePulse0);
      assertSame(edgePulse2, edgePulse1);
      assertSame(edgePulse2, edgePulse0);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getCompareCriteria());
      assertEquals((-40), vertexPulse0.getID());
      assertEquals(0, vertexPulse0.getMaxTime());
      assertFalse(vertexPulse0.isInserteDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinTime());
      assertEquals(0, vertexPulse0.getMaxDist());
      assertFalse(vertexPulse0.isInsertedTime());
      assertFalse(vertexPulse1.isInserteDist());
      assertEquals(0, vertexPulse1.getMaxTime());
      assertEquals(0, vertexPulse1.getMaxDist());
      assertFalse(vertexPulse1.isInsertedTime());
      assertEquals((-40), vertexPulse1.getID());
      assertEquals(Integer.MAX_VALUE, vertexPulse1.getCompareCriteria());
      assertEquals(Integer.MAX_VALUE, vertexPulse1.getMinDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse1.getMinTime());
      assertEquals(0, edgePulse0.getWeightTime());
      assertEquals(0, edgePulse0.getWeightDist());
      assertEquals((-2), edgePulse0.getCompareCriteria());
      assertEquals(Integer.MAX_VALUE, edgePulse0.getID());
      assertEquals(Integer.MAX_VALUE, edgePulse1.getID());
      assertEquals(0, edgePulse1.getWeightDist());
      assertEquals((-2), edgePulse1.getCompareCriteria());
      assertEquals(0, edgePulse1.getWeightTime());
      assertEquals(0, edgePulse2.getWeightTime());
      assertEquals((-2), edgePulse2.getCompareCriteria());
      assertEquals(Integer.MAX_VALUE, edgePulse2.getID());
      assertEquals(0, edgePulse2.getWeightDist());
      
      EdgePulse edgePulse3 = edgePulse2.getNext();
      assertSame(vertexPulse0, vertexPulse1);
      assertSame(vertexPulse1, vertexPulse0);
      assertSame(edgePulse0, edgePulse3);
      assertSame(edgePulse0, edgePulse1);
      assertSame(edgePulse0, edgePulse2);
      assertSame(edgePulse1, edgePulse2);
      assertSame(edgePulse1, edgePulse3);
      assertSame(edgePulse1, edgePulse0);
      assertSame(edgePulse2, edgePulse1);
      assertSame(edgePulse2, edgePulse0);
      assertSame(edgePulse2, edgePulse3);
      assertSame(edgePulse3, edgePulse1);
      assertSame(edgePulse3, edgePulse2);
      assertSame(edgePulse3, edgePulse0);
      assertNotNull(edgePulse3);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getCompareCriteria());
      assertEquals((-40), vertexPulse0.getID());
      assertEquals(0, vertexPulse0.getMaxTime());
      assertFalse(vertexPulse0.isInserteDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinTime());
      assertEquals(0, vertexPulse0.getMaxDist());
      assertFalse(vertexPulse0.isInsertedTime());
      assertFalse(vertexPulse1.isInserteDist());
      assertEquals(0, vertexPulse1.getMaxTime());
      assertEquals(0, vertexPulse1.getMaxDist());
      assertFalse(vertexPulse1.isInsertedTime());
      assertEquals((-40), vertexPulse1.getID());
      assertEquals(Integer.MAX_VALUE, vertexPulse1.getCompareCriteria());
      assertEquals(Integer.MAX_VALUE, vertexPulse1.getMinDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse1.getMinTime());
      assertEquals(0, edgePulse0.getWeightTime());
      assertEquals(0, edgePulse0.getWeightDist());
      assertEquals((-2), edgePulse0.getCompareCriteria());
      assertEquals(Integer.MAX_VALUE, edgePulse0.getID());
      assertEquals(Integer.MAX_VALUE, edgePulse1.getID());
      assertEquals(0, edgePulse1.getWeightDist());
      assertEquals((-2), edgePulse1.getCompareCriteria());
      assertEquals(0, edgePulse1.getWeightTime());
      assertEquals(0, edgePulse2.getWeightTime());
      assertEquals((-2), edgePulse2.getCompareCriteria());
      assertEquals(Integer.MAX_VALUE, edgePulse2.getID());
      assertEquals(0, edgePulse2.getWeightDist());
      assertEquals(0, edgePulse3.getWeightDist());
      assertEquals(0, edgePulse3.getWeightTime());
      assertEquals(Integer.MAX_VALUE, edgePulse3.getID());
      assertEquals((-2), edgePulse3.getCompareCriteria());
      
      int int0 = edgePulse2.getWeightTime();
      assertSame(vertexPulse0, vertexPulse1);
      assertSame(vertexPulse1, vertexPulse0);
      assertSame(edgePulse0, edgePulse3);
      assertSame(edgePulse0, edgePulse1);
      assertSame(edgePulse0, edgePulse2);
      assertSame(edgePulse1, edgePulse2);
      assertSame(edgePulse1, edgePulse3);
      assertSame(edgePulse1, edgePulse0);
      assertSame(edgePulse2, edgePulse1);
      assertSame(edgePulse2, edgePulse0);
      assertSame(edgePulse2, edgePulse3);
      assertEquals(0, int0);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals(Integer.MAX_VALUE, VertexPulse.infinity);
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getCompareCriteria());
      assertEquals((-40), vertexPulse0.getID());
      assertEquals(0, vertexPulse0.getMaxTime());
      assertFalse(vertexPulse0.isInserteDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinTime());
      assertEquals(0, vertexPulse0.getMaxDist());
      assertFalse(vertexPulse0.isInsertedTime());
      assertFalse(vertexPulse1.isInserteDist());
      assertEquals(0, vertexPulse1.getMaxTime());
      assertEquals(0, vertexPulse1.getMaxDist());
      assertFalse(vertexPulse1.isInsertedTime());
      assertEquals((-40), vertexPulse1.getID());
      assertEquals(Integer.MAX_VALUE, vertexPulse1.getCompareCriteria());
      assertEquals(Integer.MAX_VALUE, vertexPulse1.getMinDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse1.getMinTime());
      assertEquals(0, edgePulse0.getWeightTime());
      assertEquals(0, edgePulse0.getWeightDist());
      assertEquals((-2), edgePulse0.getCompareCriteria());
      assertEquals(Integer.MAX_VALUE, edgePulse0.getID());
      assertEquals(Integer.MAX_VALUE, edgePulse1.getID());
      assertEquals(0, edgePulse1.getWeightDist());
      assertEquals((-2), edgePulse1.getCompareCriteria());
      assertEquals(0, edgePulse1.getWeightTime());
      assertEquals(0, edgePulse2.getWeightTime());
      assertEquals((-2), edgePulse2.getCompareCriteria());
      assertEquals(Integer.MAX_VALUE, edgePulse2.getID());
      assertEquals(0, edgePulse2.getWeightDist());
  }

  @Test(timeout = 26000)
  public void test40()  throws Throwable  {
      VertexPulse vertexPulse0 = new VertexPulse(864);
      VertexPulse vertexPulse1 = vertexPulse0.getBRigthDist();
      EdgePulse edgePulse0 = vertexPulse1.getReversedEdges();
      vertexPulse1.maxDist = Integer.MAX_VALUE;
      EdgePulse edgePulse1 = edgePulse0.findEdgebyTarget(vertexPulse1);
      vertexPulse0.unLinkVertexDist();
      edgePulse0.setNextE(edgePulse1);
      EdgePulse edgePulse2 = edgePulse1.getNext();
      EdgePulse edgePulse3 = edgePulse2.findEdgebyTarget(vertexPulse0);
      edgePulse1.addNextCommonTailEdge(edgePulse3);
      edgePulse2.getWeightDist();
      int int0 = (-261);
      int int1 = (-1876);
      EdgePulse edgePulse4 = new EdgePulse(int0, int0, vertexPulse1, vertexPulse1, int1);
      edgePulse4.setNextE(edgePulse1);
      edgePulse2.addNextCommonTailEdge(edgePulse4);
      edgePulse0.getTarget();
      edgePulse0.setNextE(edgePulse4);
      edgePulse2.getID();
      EdgePulse edgePulse5 = edgePulse1.getNext();
      edgePulse1.addNextCommonTailEdge(edgePulse5);
      edgePulse2.addNextCommonTailEdge(edgePulse1);
      edgePulse0.getTarget();
      edgePulse3.getCompareCriteria();
      edgePulse0.getID();
      edgePulse0.getID();
      edgePulse3.getTarget();
      edgePulse2.addNextCommonTailEdge(edgePulse1);
  }

  @Test(timeout = 26000)
  public void test41()  throws Throwable  {
      VertexPulse vertexPulse0 = new VertexPulse((-638));
      VertexPulse vertexPulse1 = vertexPulse0.getBRigthDist();
      vertexPulse1.getBRigthTime();
      EdgePulse edgePulse0 = new EdgePulse(Integer.MAX_VALUE, Integer.MAX_VALUE, vertexPulse1, vertexPulse0, Integer.MAX_VALUE);
      int int0 = edgePulse0.getWeightDist();
      assertEquals(Integer.MAX_VALUE, edgePulse0.getID());
      assertEquals(Integer.MAX_VALUE, int0);
      assertEquals(Integer.MAX_VALUE, edgePulse0.getWeightTime());
  }

  @Test(timeout = 26000)
  public void test42()  throws Throwable  {
      VertexPulse vertexPulse0 = new VertexPulse(1144);
      VertexPulse vertexPulse1 = vertexPulse0.getBRigthDist();
      VertexPulse vertexPulse2 = vertexPulse1.getBLeftTime();
      vertexPulse0.fastUnlinkTime();
      EdgePulse edgePulse0 = new EdgePulse(1144, 1144, vertexPulse2, vertexPulse1, Integer.MAX_VALUE);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      vertexPulse1.magicIndex = arrayList0;
      vertexPulse0.unLinkVertexDist();
      edgePulse0.setNextE((EdgePulse) null);
      vertexPulse1.insertVertexDist(vertexPulse2);
      Object object0 = new Object();
      Object object1 = new Object();
      Integer integer0 = new Integer((-631));
      List.of((Object) vertexPulse0, object0, object1, (Object) arrayList0, (Object) integer0);
      VertexPulse vertexPulse3 = edgePulse0.getSource();
      vertexPulse0.setLeftTime(vertexPulse3);
      vertexPulse1.addReversedEdge(edgePulse0);
      edgePulse0.getSource();
      edgePulse0.getCompareCriteria();
      edgePulse0.setNextE((EdgePulse) null);
      int int0 = edgePulse0.getWeightTime();
      assertEquals(1144, int0);
      
      edgePulse0.getSource();
      int int1 = edgePulse0.getCompareCriteria();
      assertEquals((-2), int1);
      
      VertexPulse vertexPulse4 = new VertexPulse(4);
      EdgePulse edgePulse1 = edgePulse0.findEdgebyTarget(vertexPulse4);
      assertEquals(Integer.MAX_VALUE, edgePulse0.getID());
      assertNull(edgePulse1);
      assertEquals(1144, edgePulse0.getWeightDist());
  }

  @Test(timeout = 26000)
  public void test43()  throws Throwable  {
      VertexPulse vertexPulse0 = new VertexPulse((-3494));
      EdgePulse edgePulse0 = vertexPulse0.getReversedEdges();
      EdgePulse edgePulse1 = new EdgePulse(Integer.MAX_VALUE, Integer.MAX_VALUE, vertexPulse0, vertexPulse0, 0);
      edgePulse0.addNextCommonTailEdge(edgePulse1);
      EdgePulse edgePulse2 = edgePulse0.findEdgebyTarget(vertexPulse0);
      edgePulse2.findEdgebyTarget(vertexPulse0);
      edgePulse0.getID();
      int int0 = edgePulse2.getID();
      assertEquals(1, edgePulse2.getWeightDist());
      assertEquals((-1), int0);
      assertEquals(1, edgePulse2.getWeightTime());
  }

  @Test(timeout = 26000)
  public void test44()  throws Throwable  {
      VertexPulse vertexPulse0 = new VertexPulse(0);
      VertexPulse vertexPulse1 = vertexPulse0.getBLeftTime();
      VertexPulse vertexPulse2 = vertexPulse1.getBRigthTime();
      VertexPulse vertexPulse3 = vertexPulse2.getBRigthDist();
      EdgePulse edgePulse0 = vertexPulse3.getReversedEdges();
      assertEquals(1, edgePulse0.getWeightTime());
      assertEquals((-1), edgePulse0.getID());
      assertEquals(1, edgePulse0.getWeightDist());
  }

  @Test(timeout = 26000)
  public void test45()  throws Throwable  {
      VertexPulse vertexPulse0 = new VertexPulse(2751);
      VertexPulse vertexPulse1 = vertexPulse0.getBLeftDist();
      VertexPulse vertexPulse2 = vertexPulse1.getBLeftTime();
      vertexPulse2.maxTime = 278;
      EdgePulse edgePulse0 = new EdgePulse(2751, 413, vertexPulse2, vertexPulse1, 33);
      EdgePulse edgePulse1 = edgePulse0.findEdgebyTarget(vertexPulse1);
      assertNotNull(edgePulse1);
      
      edgePulse1.setNextE(edgePulse0);
      VertexPulse vertexPulse3 = edgePulse1.getSource();
      EdgePulse edgePulse2 = edgePulse0.findEdgebyTarget(vertexPulse3);
      edgePulse0.getNext();
      vertexPulse1.getBRigthTime();
      edgePulse2.findEdgebyTarget(vertexPulse0);
      int int0 = edgePulse0.getWeightDist();
      assertEquals(413, edgePulse0.getWeightTime());
      assertEquals(2751, int0);
      assertEquals(33, edgePulse0.getID());
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 18 23:29:29 GMT 2022
 */

package dimacs9;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import dimacs9.EdgePulse;
import dimacs9.FinalVertexPulse;
import dimacs9.PulseGraph;
import dimacs9.VertexPulse;
import java.util.ArrayList;
import org.junit.runner.RunWith;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FinalVertexPulse_ESTest extends FinalVertexPulse_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      FinalVertexPulse finalVertexPulse0 = new FinalVertexPulse((-662));
      int int0 = finalVertexPulse0.getMinDist();
      assertEquals(0, finalVertexPulse0.getMaxTime());
      assertEquals(Integer.MAX_VALUE, int0);
      assertEquals(0, finalVertexPulse0.getMaxDist());
      assertEquals(Integer.MAX_VALUE, finalVertexPulse0.getMinTime());
      assertFalse(finalVertexPulse0.isInserteDist());
      assertEquals((-662), finalVertexPulse0.getID());
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      FinalVertexPulse finalVertexPulse0 = new FinalVertexPulse((-1558));
      finalVertexPulse0.setRigthDist((VertexPulse) null);
      // Undeclared exception!
      try { 
        finalVertexPulse0.unLinkVertexDist();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("dimacs9.FinalVertexPulse", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      FinalVertexPulse finalVertexPulse0 = new FinalVertexPulse((-662));
      int int0 = finalVertexPulse0.getMinTime();
      assertEquals((-662), finalVertexPulse0.getID());
      assertEquals(0, finalVertexPulse0.getMaxTime());
      assertFalse(finalVertexPulse0.isInserteDist());
      assertEquals(Integer.MAX_VALUE, int0);
      assertEquals(Integer.MAX_VALUE, finalVertexPulse0.getCompareCriteria());
      assertEquals(0, finalVertexPulse0.getMaxDist());
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      FinalVertexPulse finalVertexPulse0 = new FinalVertexPulse(0);
      assertEquals(0, finalVertexPulse0.getMaxTime());
      
      finalVertexPulse0.setMaxTime(Integer.MAX_VALUE);
      int int0 = finalVertexPulse0.getMaxTime();
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      FinalVertexPulse finalVertexPulse0 = new FinalVertexPulse((-1558));
      int int0 = finalVertexPulse0.getID();
      assertEquals((-1558), int0);
      assertFalse(finalVertexPulse0.isInserteDist());
      assertEquals(0, finalVertexPulse0.getMaxDist());
      assertEquals(Integer.MAX_VALUE, finalVertexPulse0.getMinDist());
      assertEquals(0, finalVertexPulse0.getMaxTime());
      assertEquals(Integer.MAX_VALUE, finalVertexPulse0.getMinTime());
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      FinalVertexPulse finalVertexPulse0 = new FinalVertexPulse((-1885));
      int int0 = finalVertexPulse0.getMaxTime();
      assertEquals((-1885), finalVertexPulse0.getID());
      assertEquals(0, int0);
      assertEquals(Integer.MAX_VALUE, finalVertexPulse0.getMinTime());
      assertFalse(finalVertexPulse0.isInserteDist());
      assertEquals(Integer.MAX_VALUE, finalVertexPulse0.getCompareCriteria());
      assertEquals(0, finalVertexPulse0.getMaxDist());
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      FinalVertexPulse finalVertexPulse0 = new FinalVertexPulse(1);
      boolean boolean0 = finalVertexPulse0.isInserteDist();
      assertEquals(Integer.MAX_VALUE, finalVertexPulse0.getMinDist());
      assertFalse(boolean0);
      assertEquals(1, finalVertexPulse0.getID());
      assertEquals(0, finalVertexPulse0.getMaxDist());
      assertEquals(Integer.MAX_VALUE, finalVertexPulse0.getMinTime());
      assertEquals(0, finalVertexPulse0.getMaxTime());
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      FinalVertexPulse finalVertexPulse0 = new FinalVertexPulse((-1558));
      int int0 = finalVertexPulse0.getMaxDist();
      assertEquals(Integer.MAX_VALUE, finalVertexPulse0.getMinTime());
      assertFalse(finalVertexPulse0.isInserteDist());
      assertEquals((-1558), finalVertexPulse0.getID());
      assertEquals(Integer.MAX_VALUE, finalVertexPulse0.getCompareCriteria());
      assertEquals(0, int0);
      assertEquals(0, finalVertexPulse0.getMaxTime());
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      FinalVertexPulse finalVertexPulse0 = new FinalVertexPulse((-1558));
      finalVertexPulse0.reset();
      assertEquals(0, finalVertexPulse0.getMaxTime());
      assertEquals(Integer.MAX_VALUE, finalVertexPulse0.getMinDist());
      assertEquals(Integer.MAX_VALUE, finalVertexPulse0.getMinTime());
      assertFalse(finalVertexPulse0.isInserteDist());
      assertEquals(0, finalVertexPulse0.getMaxDist());
      assertEquals((-1558), finalVertexPulse0.getID());
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      FinalVertexPulse finalVertexPulse0 = new FinalVertexPulse(0);
      finalVertexPulse0.findEdgeByTarget(finalVertexPulse0);
      assertEquals(Integer.MAX_VALUE, finalVertexPulse0.getCompareCriteria());
      assertEquals(0, finalVertexPulse0.getMaxDist());
      assertFalse(finalVertexPulse0.isInserteDist());
      assertEquals(0, finalVertexPulse0.getMaxTime());
      assertEquals(0, finalVertexPulse0.getID());
      assertEquals(Integer.MAX_VALUE, finalVertexPulse0.getMinTime());
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      FinalVertexPulse finalVertexPulse0 = new FinalVertexPulse((-2146851849));
      EdgePulse edgePulse0 = finalVertexPulse0.getReversedEdges();
      assertNotNull(edgePulse0);
      
      finalVertexPulse0.addReversedEdge(edgePulse0);
      assertEquals(1, edgePulse0.getWeightTime());
      assertEquals(1, edgePulse0.getWeightDist());
      assertEquals((-2), edgePulse0.getCompareCriteria());
      assertEquals((-1), edgePulse0.getID());
      
      finalVertexPulse0.findEdgeByTarget(finalVertexPulse0);
      assertEquals((-2146851849), finalVertexPulse0.getID());
      assertFalse(finalVertexPulse0.isInserteDist());
      assertEquals(0, finalVertexPulse0.getMaxDist());
      assertEquals(0, finalVertexPulse0.getMaxTime());
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      FinalVertexPulse finalVertexPulse0 = new FinalVertexPulse(3034);
      FinalVertexPulse finalVertexPulse1 = new FinalVertexPulse(Integer.MAX_VALUE);
      finalVertexPulse1.insertVertexDist(finalVertexPulse0);
      assertEquals(3034, finalVertexPulse0.getID());
      
      boolean boolean0 = finalVertexPulse1.unLinkVertexDist();
      assertFalse(finalVertexPulse1.isInserteDist());
      assertEquals(0, finalVertexPulse1.getMaxTime());
      assertFalse(boolean0);
      assertEquals(0, finalVertexPulse1.getMaxDist());
      assertEquals(Integer.MAX_VALUE, finalVertexPulse1.getMinTime());
      assertEquals(Integer.MAX_VALUE, finalVertexPulse1.getMinDist());
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      FinalVertexPulse finalVertexPulse0 = new FinalVertexPulse(3034);
      boolean boolean0 = finalVertexPulse0.unLinkVertexDist();
      assertEquals(3034, finalVertexPulse0.getID());
      assertEquals(0, finalVertexPulse0.getMaxTime());
      assertEquals(Integer.MAX_VALUE, finalVertexPulse0.getCompareCriteria());
      assertEquals(0, finalVertexPulse0.getMaxDist());
      assertEquals(Integer.MAX_VALUE, finalVertexPulse0.getMinTime());
      assertTrue(boolean0);
      assertFalse(finalVertexPulse0.isInserteDist());
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      FinalVertexPulse finalVertexPulse0 = new FinalVertexPulse(4434);
      ArrayList<Integer> arrayList0 = finalVertexPulse0.magicIndex;
      finalVertexPulse0.pulse(0, 4434, arrayList0);
      assertEquals(Integer.MAX_VALUE, finalVertexPulse0.getMinTime());
      assertFalse(finalVertexPulse0.isInserteDist());
      assertEquals(Integer.MAX_VALUE, finalVertexPulse0.getCompareCriteria());
      assertEquals(0, finalVertexPulse0.getMaxDist());
      assertEquals(4434, finalVertexPulse0.getID());
      assertEquals(0, finalVertexPulse0.getMaxTime());
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      FinalVertexPulse finalVertexPulse0 = new FinalVertexPulse(4434);
      ArrayList<Integer> arrayList0 = finalVertexPulse0.magicIndex;
      finalVertexPulse0.pulse(4434, (-3922), arrayList0);
      assertFalse(finalVertexPulse0.isInserteDist());
      assertEquals(Integer.MAX_VALUE, finalVertexPulse0.getMinDist());
      assertEquals(0, finalVertexPulse0.getMaxDist());
      assertEquals(4434, finalVertexPulse0.getID());
      assertEquals(Integer.MAX_VALUE, finalVertexPulse0.getMinTime());
      assertEquals(0, finalVertexPulse0.getMaxTime());
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      FinalVertexPulse finalVertexPulse0 = new FinalVertexPulse(4434);
      EdgePulse edgePulse0 = finalVertexPulse0.getReversedEdges();
      edgePulse0.setNextE(edgePulse0);
      finalVertexPulse0.addReversedEdge(edgePulse0);
      // Undeclared exception!
      finalVertexPulse0.addReversedEdge(edgePulse0);
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      FinalVertexPulse finalVertexPulse0 = new FinalVertexPulse(1);
      EdgePulse edgePulse0 = finalVertexPulse0.getReversedEdges();
      finalVertexPulse0.addReversedEdge(edgePulse0);
      // Undeclared exception!
      try { 
        finalVertexPulse0.findEdgeByTarget((VertexPulse) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      FinalVertexPulse finalVertexPulse0 = new FinalVertexPulse(4434);
      FinalVertexPulse finalVertexPulse1 = new FinalVertexPulse(Integer.MAX_VALUE);
      EdgePulse edgePulse0 = finalVertexPulse0.getReversedEdges();
      edgePulse0.setNextE(edgePulse0);
      finalVertexPulse0.addReversedEdge(edgePulse0);
      // Undeclared exception!
      finalVertexPulse0.findEdgeByTarget(finalVertexPulse1);
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      FinalVertexPulse finalVertexPulse0 = new FinalVertexPulse(3829);
      // Undeclared exception!
      try { 
        finalVertexPulse0.insertVertexDist((VertexPulse) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("dimacs9.FinalVertexPulse", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      FinalVertexPulse finalVertexPulse0 = new FinalVertexPulse((-2255));
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      PulseGraph.Path = arrayList0;
      // Undeclared exception!
      try { 
        finalVertexPulse0.pulse((-3576), 0, arrayList0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      FinalVertexPulse finalVertexPulse0 = new FinalVertexPulse(3034);
      // Undeclared exception!
      try { 
        finalVertexPulse0.pulse(0, 0, (ArrayList<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("dimacs9.FinalVertexPulse", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      FinalVertexPulse finalVertexPulse0 = new FinalVertexPulse((-1));
      finalVertexPulse0.setMinDist((-1539));
      finalVertexPulse0.getBLeftDist();
      assertEquals((-1539), finalVertexPulse0.getMinDist());
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      FinalVertexPulse finalVertexPulse0 = new FinalVertexPulse(0);
      assertEquals(Integer.MAX_VALUE, finalVertexPulse0.getMinDist());
      
      finalVertexPulse0.setMinDist(0);
      finalVertexPulse0.getBLeftDist();
      assertEquals(0, finalVertexPulse0.getCompareCriteria());
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      FinalVertexPulse finalVertexPulse0 = new FinalVertexPulse(0);
      finalVertexPulse0.setMaxDist(Integer.MAX_VALUE);
      finalVertexPulse0.getBLeftDist();
      assertEquals(Integer.MAX_VALUE, finalVertexPulse0.getMaxDist());
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      FinalVertexPulse finalVertexPulse0 = new FinalVertexPulse(3034);
      finalVertexPulse0.setBounds(0, 0);
      finalVertexPulse0.getBLeftDist();
      assertEquals((-2147483647), finalVertexPulse0.getMaxTime());
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      FinalVertexPulse finalVertexPulse0 = new FinalVertexPulse(0);
      finalVertexPulse0.setMaxTime(2721);
      finalVertexPulse0.getBLeftDist();
      assertEquals(2721, finalVertexPulse0.getMaxTime());
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      FinalVertexPulse finalVertexPulse0 = new FinalVertexPulse((-4990));
      finalVertexPulse0.setMinTime((-4990));
      finalVertexPulse0.getBLeftDist();
      assertEquals((-4990), finalVertexPulse0.getMinTime());
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      FinalVertexPulse finalVertexPulse0 = new FinalVertexPulse(0);
      assertEquals(Integer.MAX_VALUE, finalVertexPulse0.getMinTime());
      
      finalVertexPulse0.setMinTime(0);
      finalVertexPulse0.getBLeftDist();
      assertEquals(0, finalVertexPulse0.getMinTime());
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      FinalVertexPulse finalVertexPulse0 = new FinalVertexPulse(0);
      assertFalse(finalVertexPulse0.isInserteDist());
      
      finalVertexPulse0.setInsertedDist();
      finalVertexPulse0.getBLeftDist();
      assertTrue(finalVertexPulse0.isInserteDist());
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      FinalVertexPulse finalVertexPulse0 = new FinalVertexPulse(0);
      finalVertexPulse0.setInsertedTime();
      VertexPulse vertexPulse0 = finalVertexPulse0.getBLeftDist();
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinTime());
      assertFalse(vertexPulse0.isInserteDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getCompareCriteria());
      assertEquals(0, vertexPulse0.getMaxDist());
      assertEquals(0, vertexPulse0.getID());
      assertEquals(0, vertexPulse0.getMaxTime());
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      FinalVertexPulse finalVertexPulse0 = new FinalVertexPulse((-1558));
      finalVertexPulse0.setLeftDist((VertexPulse) null);
      finalVertexPulse0.getBLeftDist();
      assertEquals(0, finalVertexPulse0.getMaxTime());
      assertFalse(finalVertexPulse0.isInserteDist());
      assertEquals((-1558), finalVertexPulse0.getID());
      assertEquals(Integer.MAX_VALUE, finalVertexPulse0.getMinTime());
      assertEquals(Integer.MAX_VALUE, finalVertexPulse0.getCompareCriteria());
      assertEquals(0, finalVertexPulse0.getMaxDist());
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      FinalVertexPulse finalVertexPulse0 = new FinalVertexPulse(1094);
      assertEquals(Integer.MAX_VALUE, finalVertexPulse0.getCompareCriteria());
      
      finalVertexPulse0.setMinDist((-1));
      finalVertexPulse0.getBRigthDist();
      assertEquals((-1), finalVertexPulse0.getCompareCriteria());
  }

  @Test(timeout = 11000)
  public void test32()  throws Throwable  {
      FinalVertexPulse finalVertexPulse0 = new FinalVertexPulse(0);
      assertEquals(Integer.MAX_VALUE, finalVertexPulse0.getCompareCriteria());
      
      finalVertexPulse0.minDist = 0;
      finalVertexPulse0.getBRigthDist();
      assertEquals(Integer.MAX_VALUE, finalVertexPulse0.getMinTime());
  }

  @Test(timeout = 11000)
  public void test33()  throws Throwable  {
      FinalVertexPulse finalVertexPulse0 = new FinalVertexPulse((-2146851849));
      VertexPulse vertexPulse0 = finalVertexPulse0.getBRigthDist();
      assertEquals((-2146851849), vertexPulse0.getID());
      assertEquals(0, vertexPulse0.getMaxTime());
      assertEquals(0, vertexPulse0.getMaxDist());
      assertFalse(vertexPulse0.isInserteDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinTime());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinDist());
  }

  @Test(timeout = 11000)
  public void test34()  throws Throwable  {
      FinalVertexPulse finalVertexPulse0 = new FinalVertexPulse(2146045279);
      finalVertexPulse0.setMaxDist(Integer.MAX_VALUE);
      finalVertexPulse0.getBRigthDist();
      assertEquals(Integer.MAX_VALUE, finalVertexPulse0.getMaxDist());
  }

  @Test(timeout = 11000)
  public void test35()  throws Throwable  {
      FinalVertexPulse finalVertexPulse0 = new FinalVertexPulse(3034);
      finalVertexPulse0.setBounds(0, 0);
      finalVertexPulse0.getBRigthDist();
      assertEquals((-2147483647), finalVertexPulse0.getMaxTime());
  }

  @Test(timeout = 11000)
  public void test36()  throws Throwable  {
      FinalVertexPulse finalVertexPulse0 = new FinalVertexPulse(4434);
      assertEquals(0, finalVertexPulse0.getMaxTime());
      
      finalVertexPulse0.maxTime = 4434;
      finalVertexPulse0.getBRigthDist();
      assertEquals(0, finalVertexPulse0.getMaxDist());
  }

  @Test(timeout = 11000)
  public void test37()  throws Throwable  {
      FinalVertexPulse finalVertexPulse0 = new FinalVertexPulse(0);
      assertEquals(Integer.MAX_VALUE, finalVertexPulse0.getMinTime());
      
      finalVertexPulse0.setMinTime((-1));
      finalVertexPulse0.getBRigthDist();
      assertEquals((-1), finalVertexPulse0.getMinTime());
  }

  @Test(timeout = 11000)
  public void test38()  throws Throwable  {
      FinalVertexPulse finalVertexPulse0 = new FinalVertexPulse(0);
      assertEquals(Integer.MAX_VALUE, finalVertexPulse0.getMinTime());
      
      finalVertexPulse0.setMinTime(0);
      finalVertexPulse0.getBRigthDist();
      assertEquals(0, finalVertexPulse0.getMinTime());
  }

  @Test(timeout = 11000)
  public void test39()  throws Throwable  {
      FinalVertexPulse finalVertexPulse0 = new FinalVertexPulse(0);
      assertFalse(finalVertexPulse0.isInserteDist());
      
      finalVertexPulse0.setInsertedDist();
      finalVertexPulse0.getBRigthDist();
      assertTrue(finalVertexPulse0.isInserteDist());
  }

  @Test(timeout = 11000)
  public void test40()  throws Throwable  {
      FinalVertexPulse finalVertexPulse0 = new FinalVertexPulse(4434);
      finalVertexPulse0.setInsertedTime();
      VertexPulse vertexPulse0 = finalVertexPulse0.getBRigthDist();
      assertEquals(4434, vertexPulse0.getID());
      assertEquals(0, vertexPulse0.getMaxTime());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getMinTime());
      assertFalse(vertexPulse0.isInserteDist());
      assertEquals(0, vertexPulse0.getMaxDist());
      assertEquals(Integer.MAX_VALUE, vertexPulse0.getCompareCriteria());
  }

  @Test(timeout = 11000)
  public void test41()  throws Throwable  {
      FinalVertexPulse finalVertexPulse0 = new FinalVertexPulse((-1892));
      finalVertexPulse0.setRigthDist((VertexPulse) null);
      finalVertexPulse0.getBRigthDist();
      assertEquals(Integer.MAX_VALUE, finalVertexPulse0.getMinTime());
      assertEquals(0, finalVertexPulse0.getMaxTime());
      assertEquals(0, finalVertexPulse0.getMaxDist());
      assertEquals(Integer.MAX_VALUE, finalVertexPulse0.getCompareCriteria());
      assertEquals((-1892), finalVertexPulse0.getID());
      assertFalse(finalVertexPulse0.isInserteDist());
  }

  @Test(timeout = 11000)
  public void test42()  throws Throwable  {
      FinalVertexPulse finalVertexPulse0 = new FinalVertexPulse(4434);
      int int0 = finalVertexPulse0.getID();
      assertFalse(finalVertexPulse0.isInserteDist());
      assertEquals(Integer.MAX_VALUE, finalVertexPulse0.getMinTime());
      assertEquals(4434, int0);
      assertEquals(Integer.MAX_VALUE, finalVertexPulse0.getMinDist());
      assertEquals(0, finalVertexPulse0.getMaxDist());
      assertEquals(0, finalVertexPulse0.getMaxTime());
  }

  @Test(timeout = 11000)
  public void test43()  throws Throwable  {
      FinalVertexPulse finalVertexPulse0 = new FinalVertexPulse(0);
      int int0 = finalVertexPulse0.getID();
      assertEquals(Integer.MAX_VALUE, finalVertexPulse0.getMinTime());
      assertEquals(0, finalVertexPulse0.getMaxDist());
      assertEquals(Integer.MAX_VALUE, finalVertexPulse0.getCompareCriteria());
      assertFalse(finalVertexPulse0.isInserteDist());
      assertEquals(0, int0);
      assertEquals(0, finalVertexPulse0.getMaxTime());
  }

  @Test(timeout = 11000)
  public void test44()  throws Throwable  {
      FinalVertexPulse finalVertexPulse0 = new FinalVertexPulse(0);
      finalVertexPulse0.setBounds(5, 308);
      int int0 = finalVertexPulse0.getMaxDist();
      assertEquals((-2147483642), finalVertexPulse0.getMaxTime());
      assertEquals((-2147483339), int0);
  }

  @Test(timeout = 11000)
  public void test45()  throws Throwable  {
      FinalVertexPulse finalVertexPulse0 = new FinalVertexPulse(0);
      finalVertexPulse0.setMaxDist(1328);
      int int0 = finalVertexPulse0.getMaxDist();
      assertEquals(1328, int0);
  }

  @Test(timeout = 11000)
  public void test46()  throws Throwable  {
      FinalVertexPulse finalVertexPulse0 = new FinalVertexPulse(0);
      finalVertexPulse0.setBounds(266, 0);
      int int0 = finalVertexPulse0.getMaxTime();
      assertEquals((-2147483381), int0);
  }

  @Test(timeout = 11000)
  public void test47()  throws Throwable  {
      FinalVertexPulse finalVertexPulse0 = new FinalVertexPulse((-3700));
      finalVertexPulse0.setMinDist((-3700));
      int int0 = finalVertexPulse0.getMinDist();
      assertEquals((-3700), finalVertexPulse0.getCompareCriteria());
      assertEquals((-3700), int0);
  }

  @Test(timeout = 11000)
  public void test48()  throws Throwable  {
      FinalVertexPulse finalVertexPulse0 = new FinalVertexPulse(0);
      assertEquals(Integer.MAX_VALUE, finalVertexPulse0.getCompareCriteria());
      
      finalVertexPulse0.minDist = 0;
      int int0 = finalVertexPulse0.getMinDist();
      assertEquals(0, int0);
  }

  @Test(timeout = 11000)
  public void test49()  throws Throwable  {
      FinalVertexPulse finalVertexPulse0 = new FinalVertexPulse(0);
      FinalVertexPulse finalVertexPulse1 = (FinalVertexPulse)finalVertexPulse0.getBRigthDist();
      finalVertexPulse1.minTime = (-649);
      int int0 = finalVertexPulse0.getMinTime();
      assertEquals((-649), int0);
  }

  @Test(timeout = 11000)
  public void test50()  throws Throwable  {
      FinalVertexPulse finalVertexPulse0 = new FinalVertexPulse((-1678));
      assertEquals(Integer.MAX_VALUE, finalVertexPulse0.getMinTime());
      
      finalVertexPulse0.minTime = 0;
      int int0 = finalVertexPulse0.getMinTime();
      assertEquals(0, int0);
  }

  @Test(timeout = 11000)
  public void test51()  throws Throwable  {
      FinalVertexPulse finalVertexPulse0 = new FinalVertexPulse((-4990));
      finalVertexPulse0.setMinTime((-4990));
      finalVertexPulse0.getReversedEdges();
      assertEquals((-4990), finalVertexPulse0.getMinTime());
  }

  @Test(timeout = 11000)
  public void test52()  throws Throwable  {
      FinalVertexPulse finalVertexPulse0 = new FinalVertexPulse(0);
      finalVertexPulse0.setMinTime(0);
      finalVertexPulse0.setMinDist(0);
      finalVertexPulse0.getReversedEdges();
      assertEquals(0, finalVertexPulse0.getMinDist());
      assertEquals(0, finalVertexPulse0.getMinTime());
  }

  @Test(timeout = 11000)
  public void test53()  throws Throwable  {
      FinalVertexPulse finalVertexPulse0 = new FinalVertexPulse(0);
      EdgePulse edgePulse0 = new EdgePulse(Integer.MAX_VALUE, Integer.MAX_VALUE, finalVertexPulse0, finalVertexPulse0, Integer.MAX_VALUE);
      finalVertexPulse0.addReversedEdge(edgePulse0);
      EdgePulse edgePulse1 = finalVertexPulse0.getReversedEdges();
      assertEquals(0, finalVertexPulse0.getID());
      assertEquals((-2), edgePulse1.getCompareCriteria());
      assertEquals(0, finalVertexPulse0.getMaxDist());
      assertFalse(finalVertexPulse0.isInserteDist());
      assertEquals(0, finalVertexPulse0.getMaxTime());
      assertEquals(Integer.MAX_VALUE, edgePulse1.getID());
  }

  @Test(timeout = 11000)
  public void test54()  throws Throwable  {
      FinalVertexPulse finalVertexPulse0 = new FinalVertexPulse(0);
      EdgePulse edgePulse0 = new EdgePulse(0, Integer.MAX_VALUE, finalVertexPulse0, finalVertexPulse0, 0);
      finalVertexPulse0.addReversedEdge(edgePulse0);
      EdgePulse edgePulse1 = finalVertexPulse0.getReversedEdges();
      assertFalse(finalVertexPulse0.isInserteDist());
      assertEquals(0, finalVertexPulse0.getID());
      assertEquals(0, finalVertexPulse0.getMaxTime());
      assertEquals(0, finalVertexPulse0.getMaxDist());
      assertEquals((-2), edgePulse1.getCompareCriteria());
      assertEquals(Integer.MAX_VALUE, edgePulse1.getWeightTime());
  }

  @Test(timeout = 11000)
  public void test55()  throws Throwable  {
      FinalVertexPulse finalVertexPulse0 = new FinalVertexPulse((-203));
      EdgePulse edgePulse0 = new EdgePulse(1831, (-203), finalVertexPulse0, finalVertexPulse0, (-203));
      finalVertexPulse0.addReversedEdge(edgePulse0);
      EdgePulse edgePulse1 = finalVertexPulse0.getReversedEdges();
      assertEquals(0, finalVertexPulse0.getMaxTime());
      assertEquals(0, finalVertexPulse0.getMaxDist());
      assertEquals((-2), edgePulse1.getCompareCriteria());
      assertFalse(finalVertexPulse0.isInserteDist());
      assertEquals((-203), edgePulse1.getID());
      assertEquals((-203), finalVertexPulse0.getID());
  }

  @Test(timeout = 11000)
  public void test56()  throws Throwable  {
      FinalVertexPulse finalVertexPulse0 = new FinalVertexPulse(0);
      assertFalse(finalVertexPulse0.isInserteDist());
      
      finalVertexPulse0.setInsertedDist();
      boolean boolean0 = finalVertexPulse0.isInserteDist();
      assertTrue(boolean0);
  }

  @Test(timeout = 11000)
  public void test57()  throws Throwable  {
      FinalVertexPulse finalVertexPulse0 = new FinalVertexPulse(0);
      FinalVertexPulse finalVertexPulse1 = new FinalVertexPulse(Integer.MAX_VALUE);
      finalVertexPulse0.insertVertexDist(finalVertexPulse1);
      assertEquals(Integer.MAX_VALUE, finalVertexPulse1.getID());
      
      boolean boolean0 = finalVertexPulse0.unLinkVertexDist();
      assertEquals(0, finalVertexPulse0.getMaxTime());
      assertEquals(Integer.MAX_VALUE, finalVertexPulse0.getMinTime());
      assertEquals(0, finalVertexPulse0.getID());
      assertEquals(0, finalVertexPulse0.getMaxDist());
      assertEquals(Integer.MAX_VALUE, finalVertexPulse0.getCompareCriteria());
      assertFalse(boolean0);
      assertFalse(finalVertexPulse0.isInserteDist());
  }

  @Test(timeout = 11000)
  public void test58()  throws Throwable  {
      FinalVertexPulse finalVertexPulse0 = new FinalVertexPulse(0);
      assertEquals(Integer.MAX_VALUE, finalVertexPulse0.getCompareCriteria());
      
      finalVertexPulse0.minDist = 0;
      finalVertexPulse0.setBounds(Integer.MAX_VALUE, 1);
      assertEquals(Integer.MAX_VALUE, finalVertexPulse0.getMinTime());
  }

  @Test(timeout = 11000)
  public void test59()  throws Throwable  {
      FinalVertexPulse finalVertexPulse0 = new FinalVertexPulse((-2427));
      finalVertexPulse0.setMinTime((-2427));
      finalVertexPulse0.setBounds((-2427), 5);
      assertEquals((-2427), finalVertexPulse0.getMinTime());
  }

  @Test(timeout = 11000)
  public void test60()  throws Throwable  {
      FinalVertexPulse finalVertexPulse0 = new FinalVertexPulse(0);
      PulseGraph pulseGraph0 = new PulseGraph(0);
      pulseGraph0.SetConstraint(Integer.MAX_VALUE);
      finalVertexPulse0.setBounds(266, 0);
      ArrayList<Integer> arrayList0 = finalVertexPulse0.magicIndex;
      finalVertexPulse0.pulse(Integer.MAX_VALUE, 0, arrayList0);
      assertEquals((-2147483381), finalVertexPulse0.getMaxTime());
  }

  @Test(timeout = 11000)
  public void test61()  throws Throwable  {
      FinalVertexPulse finalVertexPulse0 = new FinalVertexPulse(0);
      PulseGraph pulseGraph0 = new PulseGraph(0);
      pulseGraph0.SetConstraint(Integer.MAX_VALUE);
      pulseGraph0.setPrimalBound(Integer.MAX_VALUE);
      ArrayList<Integer> arrayList0 = finalVertexPulse0.magicIndex;
      finalVertexPulse0.pulse(Integer.MAX_VALUE, Integer.MAX_VALUE, arrayList0);
      assertEquals(Integer.MAX_VALUE, finalVertexPulse0.getCompareCriteria());
      assertFalse(finalVertexPulse0.isInserteDist());
      assertEquals(0, finalVertexPulse0.getMaxDist());
      assertEquals(Integer.MAX_VALUE, finalVertexPulse0.getMinTime());
      assertEquals(0, finalVertexPulse0.getID());
      assertEquals(0, finalVertexPulse0.getMaxTime());
  }
}
